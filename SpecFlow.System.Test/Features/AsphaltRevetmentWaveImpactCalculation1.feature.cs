// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.SystemTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestAsphaltRevetmentWaveImpactCalculation1")]
    public partial class TestAsphaltRevetmentWaveImpactCalculation1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AsphaltRevetmentWaveImpactCalculation1.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "TestAsphaltRevetmentWaveImpactCalculation1", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "BeginTime",
                        "EndTime",
                        "WaterLevel",
                        "WaveHeightHm0",
                        "WavePeriodTm10",
                        "WaveAngle"});
            table1.AddRow(new string[] {
                        "0",
                        "3600",
                        "2",
                        "1",
                        "4",
                        "0"});
            table1.AddRow(new string[] {
                        "3600",
                        "7200",
                        "2.2",
                        "1.5",
                        "5",
                        "8"});
            table1.AddRow(new string[] {
                        "7200",
                        "10800",
                        "2.4",
                        "2",
                        "5.5",
                        "0"});
            table1.AddRow(new string[] {
                        "10800",
                        "14400",
                        "2.6",
                        "2.4",
                        "6",
                        "0"});
            table1.AddRow(new string[] {
                        "14400",
                        "18000",
                        "2.8",
                        "2.5",
                        "6.2",
                        "0"});
            table1.AddRow(new string[] {
                        "18000",
                        "21600",
                        "3",
                        "2.6",
                        "6.3",
                        "0"});
            table1.AddRow(new string[] {
                        "21600",
                        "25200",
                        "2.8",
                        "2.7",
                        "6.5",
                        "0"});
            table1.AddRow(new string[] {
                        "25200",
                        "28800",
                        "2.6",
                        "2.6",
                        "6.6",
                        "0"});
            table1.AddRow(new string[] {
                        "28800",
                        "32400",
                        "2.4",
                        "2.5",
                        "6.3",
                        "0"});
            table1.AddRow(new string[] {
                        "32400",
                        "36000",
                        "2",
                        "2.4",
                        "6.2",
                        "0"});
#line 5
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "StartPointX",
                        "StartPointZ",
                        "EndPointX",
                        "EndPointZ"});
            table2.AddRow(new string[] {
                        "0",
                        "0",
                        "30",
                        "7.5"});
#line 17
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "X",
                        "CharacteristicPointType"});
            table3.AddRow(new string[] {
                        "0",
                        "OuterToe"});
            table3.AddRow(new string[] {
                        "30",
                        "OuterCrest"});
#line 20
 testRunner.And("the following dike profile point data:", ((string)(null)), table3, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "AsphaltRevetmentTopLayerType",
                            "FailureTension",
                            "SoilElasticity",
                            "ThicknessUpperLayer",
                            "ElasticModulusUpperLayer"});
                table4.AddRow(new string[] {
                            "10",
                            "HydraulicAsphaltConcrete",
                            "1.6",
                            "55",
                            "0.4",
                            "18000"});
#line 27
 testRunner.Given("the following location construction properties:", ((string)(null)), table4, "Given ");
#line hidden
#line 30
 testRunner.When("I add the asphalt wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "AsphaltRevetmentTopLayerType",
                            "FailureTension",
                            "SoilElasticity",
                            "ThicknessUpperLayer",
                            "ElasticModulusUpperLayer"});
                table5.AddRow(new string[] {
                            "10",
                            "HydraulicAsphaltConcrete",
                            "1.75",
                            "60",
                            "0.3",
                            "16000"});
#line 34
 testRunner.Given("the following location construction properties:", ((string)(null)), table5, "Given ");
#line hidden
#line 37
 testRunner.And("the location constructionwith has the initial damage of 0.4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.When("I add the asphalt wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "AsphaltRevetmentTopLayerType",
                            "FailureTension",
                            "SoilElasticity",
                            "ThicknessUpperLayer",
                            "ElasticModulusUpperLayer",
                            "ThicknessSubLayer",
                            "ElasticModulusSubLayer"});
                table6.AddRow(new string[] {
                            "10",
                            "HydraulicAsphaltConcrete",
                            "1.6",
                            "55",
                            "0.15",
                            "18000",
                            "0.18",
                            "15000"});
#line 42
 testRunner.Given("the following location construction properties:", ((string)(null)), table6, "Given ");
#line hidden
#line 47
 testRunner.When("I add the asphalt wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "AsphaltRevetmentTopLayerType",
                            "FailureTension",
                            "SoilElasticity",
                            "ThicknessUpperLayer",
                            "ElasticModulusUpperLayer"});
                table7.AddRow(new string[] {
                            "10",
                            "HydraulicAsphaltConcrete",
                            "1.6",
                            "55",
                            "0.3",
                            "18000"});
#line 51
 testRunner.Given("the following location construction properties:", ((string)(null)), table7, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table8.AddRow(new string[] {
                            "0.4",
                            "0.349"});
                table8.AddRow(new string[] {
                            "0.8",
                            "0.123"});
                table8.AddRow(new string[] {
                            "1.2",
                            "0.152"});
                table8.AddRow(new string[] {
                            "1.6",
                            "0.125"});
                table8.AddRow(new string[] {
                            "2.0",
                            "0.088"});
                table8.AddRow(new string[] {
                            "2.4",
                            "0.059"});
                table8.AddRow(new string[] {
                            "2.8",
                            "0.038"});
                table8.AddRow(new string[] {
                            "3.2",
                            "0.024"});
                table8.AddRow(new string[] {
                            "3.6",
                            "0.016"});
                table8.AddRow(new string[] {
                            "4.0",
                            "0.01"});
                table8.AddRow(new string[] {
                            "4.4",
                            "0.007"});
                table8.AddRow(new string[] {
                            "4.8",
                            "0.004"});
                table8.AddRow(new string[] {
                            "5.2",
                            "0.003"});
                table8.AddRow(new string[] {
                            "5.6",
                            "0.002"});
                table8.AddRow(new string[] {
                            "6.0",
                            "0.001"});
#line 54
 testRunner.And("location construction has the following impact factors:", ((string)(null)), table8, "And ");
#line hidden
#line 71
 testRunner.When("I add the asphalt wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase5_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase5_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase5_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "AsphaltRevetmentTopLayerType",
                            "FailureTension",
                            "SoilElasticity",
                            "ThicknessUpperLayer",
                            "ElasticModulusUpperLayer"});
                table9.AddRow(new string[] {
                            "10",
                            "HydraulicAsphaltConcrete",
                            "1.6",
                            "55",
                            "0.38",
                            "18000"});
#line 75
 testRunner.Given("the following location construction properties:", ((string)(null)), table9, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table10.AddRow(new string[] {
                            "0.99",
                            "0.00009647"});
                table10.AddRow(new string[] {
                            "-0.9",
                            "0.0007544"});
                table10.AddRow(new string[] {
                            "-0.81",
                            "0.004299"});
                table10.AddRow(new string[] {
                            "-0.72",
                            "0.01785"});
                table10.AddRow(new string[] {
                            "-0.63",
                            "0.05403"});
                table10.AddRow(new string[] {
                            "-0.54",
                            "0.1192"});
                table10.AddRow(new string[] {
                            "-0.45",
                            "0.1916"});
                table10.AddRow(new string[] {
                            "-0.36",
                            "0.2244"});
                table10.AddRow(new string[] {
                            "-0.27",
                            "0.1916"});
                table10.AddRow(new string[] {
                            "-0.18",
                            "0.1192"});
                table10.AddRow(new string[] {
                            "-0.09",
                            "0.05403"});
                table10.AddRow(new string[] {
                            "0.0",
                            "0.01785"});
                table10.AddRow(new string[] {
                            "0.09",
                            "0.004299"});
                table10.AddRow(new string[] {
                            "0.18",
                            "0.0007544"});
                table10.AddRow(new string[] {
                            "0.27",
                            "0.00009647"});
#line 78
 testRunner.And("location construction has the following impact factors:", ((string)(null)), table10, "And ");
#line hidden
#line 95
 testRunner.When("I add the asphalt wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase6_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase6_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase6_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "AsphaltRevetmentTopLayerType",
                            "FailureTension",
                            "SoilElasticity",
                            "ThicknessUpperLayer",
                            "ElasticModulusUpperLayer"});
                table11.AddRow(new string[] {
                            "10",
                            "HydraulicAsphaltConcrete",
                            "1.6",
                            "55",
                            "0.45",
                            "18000"});
#line 99
 testRunner.Given("the following location construction properties:", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table12.AddRow(new string[] {
                            "0.1",
                            "0.0"});
                table12.AddRow(new string[] {
                            "0.25",
                            "0.018"});
                table12.AddRow(new string[] {
                            "0.4",
                            "0.09"});
                table12.AddRow(new string[] {
                            "0.55",
                            "0.153"});
                table12.AddRow(new string[] {
                            "0.7",
                            "0.168"});
                table12.AddRow(new string[] {
                            "0.85",
                            "0.15"});
                table12.AddRow(new string[] {
                            "1.0",
                            "0.119"});
                table12.AddRow(new string[] {
                            "1.15",
                            "0.089"});
                table12.AddRow(new string[] {
                            "1.3",
                            "0.064"});
                table12.AddRow(new string[] {
                            "1.45",
                            "0.045"});
                table12.AddRow(new string[] {
                            "1.6",
                            "0.031"});
                table12.AddRow(new string[] {
                            "1.75",
                            "0.022"});
                table12.AddRow(new string[] {
                            "1.9",
                            "0.015"});
                table12.AddRow(new string[] {
                            "2.05",
                            "0.01"});
                table12.AddRow(new string[] {
                            "2.2",
                            "0.007"});
#line 102
 testRunner.And("location construction has the following impact factors:", ((string)(null)), table12, "And ");
#line hidden
#line 119
 testRunner.When("I add the asphalt wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 120
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase7_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase7_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase7_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "AsphaltRevetmentTopLayerType",
                            "FailureTension",
                            "SoilElasticity",
                            "ThicknessUpperLayer",
                            "ElasticModulusUpperLayer"});
                table13.AddRow(new string[] {
                            "10",
                            "HydraulicAsphaltConcrete",
                            "1.6",
                            "55",
                            "0.35",
                            "18000"});
#line 123
 testRunner.Given("the following location construction properties:", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "StiffnessRelationNu",
                            "FatigueAlpha",
                            "FatigueBeta",
                            "AverageNumberOfWavesCtm",
                            "ImpactNumberC",
                            "DensityOfWater"});
                table14.AddRow(new string[] {
                            "0.3",
                            "0.4",
                            "4.5",
                            "0.9",
                            "0.95",
                            "1000"});
#line 126
 testRunner.And("the following Asphalt wave impact location", ((string)(null)), table14, "And ");
#line hidden
#line 129
 testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
