// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.System.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GrassRevetmentWaveRunupRayleighCalculation3")]
    public partial class GrassRevetmentWaveRunupRayleighCalculation3Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "NaturalStoneRevetmentCalculation3.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GrassRevetmentWaveRunupRayleighCalculation3", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization3Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization3Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization3Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "BeginTime",
                            "EndTime",
                            "WaterLevel",
                            "WaveHeightHm0",
                            "WavePeriodTm10",
                            "WaveAngle"});
                table103.AddRow(new string[] {
                            "0",
                            "900",
                            "1.4",
                            "1",
                            "5.5",
                            "30"});
                table103.AddRow(new string[] {
                            "900",
                            "1800",
                            "1.6",
                            "1.2",
                            "6",
                            "60"});
                table103.AddRow(new string[] {
                            "1800",
                            "2700",
                            "1.7",
                            "1.2",
                            "6.5",
                            "90"});
                table103.AddRow(new string[] {
                            "2700",
                            "3600",
                            "1.8",
                            "1.3",
                            "7",
                            "75"});
                table103.AddRow(new string[] {
                            "3600",
                            "4500",
                            "2",
                            "1.4",
                            "7",
                            "60"});
                table103.AddRow(new string[] {
                            "4500",
                            "5400",
                            "2.1",
                            "1.3",
                            "7.5",
                            "45"});
                table103.AddRow(new string[] {
                            "5400",
                            "6300",
                            "2.1",
                            "1.6",
                            "8",
                            "30"});
                table103.AddRow(new string[] {
                            "6300",
                            "7200",
                            "2.4",
                            "1.7",
                            "8",
                            "15"});
                table103.AddRow(new string[] {
                            "7200",
                            "8100",
                            "2",
                            "2.4",
                            "8.5",
                            "0"});
                table103.AddRow(new string[] {
                            "8100",
                            "9000",
                            "1.9",
                            "2.2",
                            "8",
                            "0"});
                table103.AddRow(new string[] {
                            "9000",
                            "9900",
                            "1.6",
                            "1.8",
                            "7",
                            "0"});
                table103.AddRow(new string[] {
                            "9900",
                            "10800",
                            "1.4",
                            "1.2",
                            "6",
                            "0"});
#line 4
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table103, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartPointX",
                            "StartPointZ",
                            "EndPointX",
                            "EndPointZ"});
                table104.AddRow(new string[] {
                            "0",
                            "0",
                            "6.4",
                            "1.6"});
                table104.AddRow(new string[] {
                            "6.4",
                            "1.6",
                            "12.4",
                            "1.8"});
                table104.AddRow(new string[] {
                            "12.4",
                            "1.8",
                            "30",
                            "7.5"});
#line 18
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table104, "And ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "CharacteristicPointType"});
                table105.AddRow(new string[] {
                            "0",
                            "OuterToe"});
                table105.AddRow(new string[] {
                            "30",
                            "OuterCrest"});
#line 23
 testRunner.And("the following dike profile point data:", ((string)(null)), table105, "And ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "NaturalStoneRevetmentTopLayerType",
                            "ThicknessTopLayer",
                            "RelativeDensity"});
                table106.AddRow(new string[] {
                            "6",
                            "NordicStone",
                            "0.3",
                            "1.65"});
#line 27
 testRunner.And("the following grass natural stone revetment location construction properties:", ((string)(null)), table106, "And ");
#line hidden
#line 30
 testRunner.When("I add the grass overtopping location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization4Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization4Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization4Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "BeginTime",
                            "EndTime",
                            "WaterLevel",
                            "WaveHeightHm0",
                            "WavePeriodTm10",
                            "WaveAngle"});
                table107.AddRow(new string[] {
                            "0",
                            "900",
                            "1.27",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "900",
                            "1800",
                            "1.271",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "1800",
                            "2700",
                            "1.272",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "2700",
                            "3600",
                            "1.273",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "3600",
                            "4500",
                            "2.531",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "4500",
                            "5400",
                            "2.532",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "5400",
                            "6300",
                            "2.533",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "6300",
                            "7200",
                            "2.534",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "7200",
                            "8100",
                            "2.535",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "8100",
                            "9000",
                            "2.536",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "9000",
                            "9900",
                            "2.537",
                            "1.5",
                            "6",
                            "0"});
                table107.AddRow(new string[] {
                            "9900",
                            "10800",
                            "2.538",
                            "1.5",
                            "6",
                            "0"});
#line 34
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table107, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartPointX",
                            "StartPointZ",
                            "EndPointX",
                            "EndPointZ"});
                table108.AddRow(new string[] {
                            "0",
                            "0",
                            "30",
                            "7.5"});
#line 48
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table108, "And ");
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "CharacteristicPointType"});
                table109.AddRow(new string[] {
                            "0",
                            "OuterToe"});
                table109.AddRow(new string[] {
                            "30",
                            "OuterCrest"});
#line 52
 testRunner.And("the following dike profile point data:", ((string)(null)), table109, "And ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "NaturalStoneRevetmentTopLayerType",
                            "ThicknessTopLayer",
                            "RelativeDensity",
                            "UpperLimitLoadingAul",
                            "UpperLimitLoadingBul",
                            "UpperLimitLoadingCul",
                            "LowerLimitLoadingAll",
                            "LowerLimitLoadingBll",
                            "LowerLimitLoadingCll",
                            "DistanceMaximumWaveElevationAsmax",
                            "DistanceMaximumWaveElevationBsmax",
                            "NormativeWidthOfWaveImpactAwi",
                            "NormativeWidthOfWaveImpactBwi"});
                table110.AddRow(new string[] {
                            "6",
                            "NordicStone",
                            "0.3",
                            "1.65",
                            "0.08",
                            "0.7",
                            "3.5",
                            "0.08",
                            "0.15",
                            "5.5",
                            "0.5",
                            "0.8",
                            "1.1",
                            "0.15"});
#line 56
 testRunner.And("the following grass natural stone revetment location construction properties:", ((string)(null)), table110, "And ");
#line hidden
#line 59
 testRunner.When("I add the grass overtopping location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization5Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization5Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization5Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "BeginTime",
                            "EndTime",
                            "WaterLevel",
                            "WaveHeightHm0",
                            "WavePeriodTm10",
                            "WaveAngle"});
                table111.AddRow(new string[] {
                            "-3600",
                            "-3420",
                            "1.4",
                            "1",
                            "5.5",
                            "30"});
                table111.AddRow(new string[] {
                            "-3420",
                            "-3060",
                            "1.6",
                            "1.2",
                            "6",
                            "60"});
                table111.AddRow(new string[] {
                            "-3060",
                            "-2520",
                            "1.7",
                            "1.2",
                            "6.5",
                            "90"});
                table111.AddRow(new string[] {
                            "-2520",
                            "-1800",
                            "1.8",
                            "1.3",
                            "7",
                            "75"});
                table111.AddRow(new string[] {
                            "-1800",
                            "-900",
                            "2",
                            "1.4",
                            "7",
                            "60"});
                table111.AddRow(new string[] {
                            "-900",
                            "180",
                            "2.1",
                            "1.3",
                            "7.5",
                            "45"});
                table111.AddRow(new string[] {
                            "180",
                            "1440",
                            "2.1",
                            "1.6",
                            "8",
                            "30"});
                table111.AddRow(new string[] {
                            "1440",
                            "2880",
                            "2.4",
                            "1.7",
                            "8",
                            "15"});
                table111.AddRow(new string[] {
                            "2880",
                            "4500",
                            "2",
                            "2.4",
                            "8.5",
                            "0"});
                table111.AddRow(new string[] {
                            "4500",
                            "6300",
                            "1.9",
                            "2.2",
                            "8",
                            "0"});
                table111.AddRow(new string[] {
                            "6300",
                            "8280",
                            "1.6",
                            "1.8",
                            "7",
                            "0"});
                table111.AddRow(new string[] {
                            "8280",
                            "10800",
                            "1.4",
                            "1.2",
                            "6",
                            "0"});
#line 63
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table111, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartPointX",
                            "StartPointZ",
                            "EndPointX",
                            "EndPointZ"});
                table112.AddRow(new string[] {
                            "0",
                            "0",
                            "30",
                            "7.5"});
#line 77
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table112, "And ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "CharacteristicPointType"});
                table113.AddRow(new string[] {
                            "0",
                            "OuterToe"});
                table113.AddRow(new string[] {
                            "30",
                            "OuterCrest"});
#line 80
 testRunner.And("the following dike profile point data:", ((string)(null)), table113, "And ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "NaturalStoneRevetmentTopLayerType",
                            "ThicknessTopLayer",
                            "RelativeDensity"});
                table114.AddRow(new string[] {
                            "6",
                            "NordicStone",
                            "0.4",
                            "1.65"});
#line 84
 testRunner.And("the following grass natural stone revetment location construction properties:", ((string)(null)), table114, "And ");
#line hidden
#line 87
 testRunner.When("I add the grass overtopping location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
