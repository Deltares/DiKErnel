// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.System.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GrassRevetmentWaveRunupRayleighCalculation2")]
    public partial class GrassRevetmentWaveRunupRayleighCalculation2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "NaturalStoneRevetmentCalculation2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GrassRevetmentWaveRunupRayleighCalculation2", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "BeginTime",
                        "EndTime",
                        "WaterLevel",
                        "WaveHeightHm0",
                        "WavePeriodTm10",
                        "WaveAngle"});
            table98.AddRow(new string[] {
                        "0",
                        "900",
                        "1.4",
                        "1",
                        "5.5",
                        "30"});
            table98.AddRow(new string[] {
                        "900",
                        "1800",
                        "1.6",
                        "1.2",
                        "6",
                        "60"});
            table98.AddRow(new string[] {
                        "1800",
                        "2700",
                        "1.7",
                        "1.2",
                        "6.5",
                        "90"});
            table98.AddRow(new string[] {
                        "2700",
                        "3600",
                        "1.8",
                        "1.3",
                        "7",
                        "75"});
            table98.AddRow(new string[] {
                        "3600",
                        "4500",
                        "2",
                        "1.4",
                        "7",
                        "60"});
            table98.AddRow(new string[] {
                        "4500",
                        "5400",
                        "2.1",
                        "1.3",
                        "7.5",
                        "45"});
            table98.AddRow(new string[] {
                        "5400",
                        "6300",
                        "2.1",
                        "1.6",
                        "8",
                        "30"});
            table98.AddRow(new string[] {
                        "6300",
                        "7200",
                        "2.4",
                        "1.7",
                        "8",
                        "15"});
            table98.AddRow(new string[] {
                        "7200",
                        "8100",
                        "2",
                        "2.4",
                        "8.5",
                        "0"});
            table98.AddRow(new string[] {
                        "8100",
                        "9000",
                        "1.9",
                        "2.2",
                        "8",
                        "0"});
            table98.AddRow(new string[] {
                        "9000",
                        "9900",
                        "1.6",
                        "1.8",
                        "7",
                        "0"});
            table98.AddRow(new string[] {
                        "9900",
                        "10800",
                        "1.4",
                        "1.2",
                        "6",
                        "0"});
#line 4
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table98, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "StartPointX",
                        "StartPointZ",
                        "EndPointX",
                        "EndPointZ"});
            table99.AddRow(new string[] {
                        "0",
                        "0",
                        "6.4",
                        "1.6"});
            table99.AddRow(new string[] {
                        "6.4",
                        "1.6",
                        "12.4",
                        "1.8"});
            table99.AddRow(new string[] {
                        "12.4",
                        "1.8",
                        "30",
                        "7.5"});
#line 18
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table99, "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "X",
                        "CharacteristicPointType"});
            table100.AddRow(new string[] {
                        "0",
                        "OuterToe"});
            table100.AddRow(new string[] {
                        "6.4",
                        "CrestOuterBerm"});
            table100.AddRow(new string[] {
                        "12.4",
                        "NotchOuterBerm"});
            table100.AddRow(new string[] {
                        "30",
                        "OuterCrest"});
#line 23
 testRunner.And("the following dike profile point data:", ((string)(null)), table100, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization2Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization2Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization2Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "NaturalStoneRevetmentTopLayerType",
                            "ThicknessTopLayer",
                            "RelativeDensity"});
                table101.AddRow(new string[] {
                            "6",
                            "NordicStone",
                            "0.3",
                            "1.65"});
#line 31
 testRunner.Given("the following grass natural stone revetment location construction properties:", ((string)(null)), table101, "Given ");
#line hidden
#line 34
 testRunner.When("I add the grass overtopping location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization2Testcase2_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization2Testcase2_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization2Testcase2_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "NaturalStoneRevetmentTopLayerType",
                            "ThicknessTopLayer",
                            "RelativeDensity",
                            "SlopeUpperLevelAus",
                            "SlopeLowerLevelAls"});
                table102.AddRow(new string[] {
                            "6",
                            "NordicStone",
                            "0.3",
                            "1.65",
                            "0.5",
                            "1"});
#line 38
 testRunner.Given("the following grass natural stone revetment location construction properties:", ((string)(null)), table102, "Given ");
#line hidden
#line 41
 testRunner.When("I add the grass overtopping location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
