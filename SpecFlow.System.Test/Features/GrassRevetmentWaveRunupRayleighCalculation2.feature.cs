// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.SystemTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GrassRevetmentWaveRunupRayleighCalculation2")]
    public partial class GrassRevetmentWaveRunupRayleighCalculation2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "GrassRevetmentWaveRunupRayleighCalculation2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GrassRevetmentWaveRunupRayleighCalculation2", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization2Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization2Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization2Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "BeginTime",
                            "EndTime",
                            "WaterLevel",
                            "WaveHeightHm0",
                            "WavePeriodTm10",
                            "WaveAngle"});
                table75.AddRow(new string[] {
                            "0",
                            "3600",
                            "0",
                            "0.3",
                            "3",
                            "50"});
                table75.AddRow(new string[] {
                            "3600",
                            "7200",
                            "0.1",
                            "0.4",
                            "3.5",
                            "45"});
                table75.AddRow(new string[] {
                            "7200",
                            "10800",
                            "0.2",
                            "0.5",
                            "3.9",
                            "40"});
                table75.AddRow(new string[] {
                            "10800",
                            "14400",
                            "0.3",
                            "0.6",
                            "4.2",
                            "35"});
                table75.AddRow(new string[] {
                            "14400",
                            "18000",
                            "0.4",
                            "0.7",
                            "4.6",
                            "30"});
                table75.AddRow(new string[] {
                            "18000",
                            "21600",
                            "0.5",
                            "0.8",
                            "4.9",
                            "25"});
                table75.AddRow(new string[] {
                            "21600",
                            "25200",
                            "0.6",
                            "0.9",
                            "5.2",
                            "20"});
                table75.AddRow(new string[] {
                            "25200",
                            "28800",
                            "0.7",
                            "1",
                            "5.5",
                            "15"});
                table75.AddRow(new string[] {
                            "28800",
                            "32400",
                            "0.7",
                            "1.1",
                            "5.7",
                            "10"});
                table75.AddRow(new string[] {
                            "32400",
                            "36000",
                            "0.6",
                            "1.1",
                            "5.7",
                            "5"});
                table75.AddRow(new string[] {
                            "36000",
                            "39600",
                            "0.5",
                            "1",
                            "5.5",
                            "0"});
                table75.AddRow(new string[] {
                            "39600",
                            "43200",
                            "0.4",
                            "0.9",
                            "5.2",
                            "0"});
                table75.AddRow(new string[] {
                            "43200",
                            "46800",
                            "0.3",
                            "0.8",
                            "4.9",
                            "5"});
                table75.AddRow(new string[] {
                            "46800",
                            "50400",
                            "0.2",
                            "0.7",
                            "4.6",
                            "10"});
                table75.AddRow(new string[] {
                            "50400",
                            "54000",
                            "0.1",
                            "0.6",
                            "4.2",
                            "15"});
                table75.AddRow(new string[] {
                            "54000",
                            "57600",
                            "0",
                            "0.5",
                            "3.9",
                            "20"});
#line 5
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table75, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartPointX",
                            "StartPointZ",
                            "EndPointX",
                            "EndPointZ"});
                table76.AddRow(new string[] {
                            "0",
                            "0",
                            "25",
                            "7.5"});
#line 23
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table76, "And ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "CharacteristicPointType"});
                table77.AddRow(new string[] {
                            "0",
                            "OuterToe"});
                table77.AddRow(new string[] {
                            "25",
                            "OuterCrest"});
#line 26
 testRunner.And("the following dike profile point data:", ((string)(null)), table77, "And ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType"});
                table78.AddRow(new string[] {
                            "3",
                            "0.3",
                            "OpenSod"});
#line 30
 testRunner.Given("the following grass revetment wave runup location construction properties:", ((string)(null)), table78, "Given ");
#line hidden
#line 33
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization2Testcase2_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization2Testcase2_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization2Testcase2_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "BeginTime",
                            "EndTime",
                            "WaterLevel",
                            "WaveHeightHm0",
                            "WavePeriodTm10",
                            "WaveAngle"});
                table79.AddRow(new string[] {
                            "0",
                            "3600",
                            "0",
                            "0.3",
                            "3",
                            "50"});
                table79.AddRow(new string[] {
                            "3600",
                            "7200",
                            "0.1",
                            "0.4",
                            "3.5",
                            "45"});
                table79.AddRow(new string[] {
                            "7200",
                            "10800",
                            "0.2",
                            "0.5",
                            "3.9",
                            "40"});
                table79.AddRow(new string[] {
                            "10800",
                            "14400",
                            "0.3",
                            "0.6",
                            "4.2",
                            "35"});
                table79.AddRow(new string[] {
                            "14400",
                            "18000",
                            "0.4",
                            "0.7",
                            "4.6",
                            "30"});
                table79.AddRow(new string[] {
                            "18000",
                            "21600",
                            "0.5",
                            "0.8",
                            "4.9",
                            "25"});
                table79.AddRow(new string[] {
                            "21600",
                            "25200",
                            "0.6",
                            "0.9",
                            "5.2",
                            "20"});
                table79.AddRow(new string[] {
                            "25200",
                            "28800",
                            "0.7",
                            "1",
                            "5.5",
                            "15"});
                table79.AddRow(new string[] {
                            "28800",
                            "32400",
                            "0.7",
                            "1.1",
                            "5.7",
                            "10"});
                table79.AddRow(new string[] {
                            "32400",
                            "36000",
                            "0.6",
                            "1.1",
                            "5.7",
                            "5"});
                table79.AddRow(new string[] {
                            "36000",
                            "39600",
                            "0.5",
                            "1",
                            "5.5",
                            "0"});
                table79.AddRow(new string[] {
                            "39600",
                            "43200",
                            "0.4",
                            "0.9",
                            "5.2",
                            "0"});
                table79.AddRow(new string[] {
                            "43200",
                            "46800",
                            "0.3",
                            "0.8",
                            "4.9",
                            "5"});
                table79.AddRow(new string[] {
                            "46800",
                            "50400",
                            "0.2",
                            "0.7",
                            "4.6",
                            "10"});
                table79.AddRow(new string[] {
                            "50400",
                            "54000",
                            "0.1",
                            "0.6",
                            "4.2",
                            "15"});
                table79.AddRow(new string[] {
                            "54000",
                            "57600",
                            "0",
                            "0.5",
                            "3.9",
                            "20"});
#line 37
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table79, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartPointX",
                            "StartPointZ",
                            "EndPointX",
                            "EndPointZ"});
                table80.AddRow(new string[] {
                            "0",
                            "0",
                            "25",
                            "7.5"});
#line 55
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table80, "And ");
#line hidden
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "CharacteristicPointType"});
                table81.AddRow(new string[] {
                            "0",
                            "OuterToe"});
                table81.AddRow(new string[] {
                            "25",
                            "OuterCrest"});
#line 58
 testRunner.And("the following dike profile point data:", ((string)(null)), table81, "And ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType",
                            "IncreasedLoadTransitionAlphaM",
                            "ReducedStrengthTransitionAlphaS"});
                table82.AddRow(new string[] {
                            "3",
                            "0.3",
                            "ClosedSod",
                            "1.8",
                            "0.9"});
#line 62
 testRunner.And("the following grass revetment wave runup location construction properties:", ((string)(null)), table82, "And ");
#line hidden
#line 65
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization3Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization3Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization3Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "BeginTime",
                            "EndTime",
                            "WaterLevel",
                            "WaveHeightHm0",
                            "WavePeriodTm10",
                            "WaveAngle"});
                table83.AddRow(new string[] {
                            "0",
                            "3600",
                            "0.5",
                            "2.4",
                            "4",
                            "20"});
                table83.AddRow(new string[] {
                            "3600",
                            "7200",
                            "0.6",
                            "2.5",
                            "4.2",
                            "20"});
                table83.AddRow(new string[] {
                            "7200",
                            "10800",
                            "0.7",
                            "2.7",
                            "4.4",
                            "20"});
                table83.AddRow(new string[] {
                            "10800",
                            "14400",
                            "0.8",
                            "2.8",
                            "4.5",
                            "20"});
                table83.AddRow(new string[] {
                            "14400",
                            "18000",
                            "0.9",
                            "2.9",
                            "4.8",
                            "20"});
                table83.AddRow(new string[] {
                            "18000",
                            "21600",
                            "0.95",
                            "3",
                            "5",
                            "20"});
                table83.AddRow(new string[] {
                            "21600",
                            "25200",
                            "1",
                            "2.9",
                            "5.2",
                            "20"});
                table83.AddRow(new string[] {
                            "25200",
                            "28800",
                            "0.95",
                            "2.9",
                            "5.5",
                            "15"});
                table83.AddRow(new string[] {
                            "28800",
                            "32400",
                            "0.8",
                            "2.8",
                            "5.8",
                            "10"});
                table83.AddRow(new string[] {
                            "32400",
                            "36000",
                            "0.6",
                            "2.8",
                            "6",
                            "5"});
                table83.AddRow(new string[] {
                            "36000",
                            "39600",
                            "0.5",
                            "2.5",
                            "6",
                            "0"});
                table83.AddRow(new string[] {
                            "39600",
                            "43200",
                            "0.4",
                            "2.1",
                            "5.8",
                            "0"});
                table83.AddRow(new string[] {
                            "43200",
                            "46800",
                            "0.3",
                            "1.8",
                            "5.5",
                            "5"});
                table83.AddRow(new string[] {
                            "46800",
                            "50400",
                            "0.2",
                            "1.5",
                            "5.2",
                            "10"});
                table83.AddRow(new string[] {
                            "50400",
                            "54000",
                            "0.1",
                            "1.3",
                            "4.8",
                            "15"});
                table83.AddRow(new string[] {
                            "54000",
                            "57600",
                            "0",
                            "1",
                            "4.5",
                            "20"});
#line 69
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table83, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartPointX",
                            "StartPointZ",
                            "EndPointX",
                            "EndPointZ"});
                table84.AddRow(new string[] {
                            "0",
                            "0",
                            "25",
                            "7.5"});
#line 87
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table84, "And ");
#line hidden
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "CharacteristicPointType"});
                table85.AddRow(new string[] {
                            "0",
                            "OuterToe"});
                table85.AddRow(new string[] {
                            "25",
                            "OuterCrest"});
#line 90
 testRunner.And("the following dike profile point data:", ((string)(null)), table85, "And ");
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType"});
                table86.AddRow(new string[] {
                            "3",
                            "0.3",
                            "ClosedSod"});
#line 94
 testRunner.And("the following grass revetment wave runup location construction properties:", ((string)(null)), table86, "And ");
#line hidden
#line 97
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization4Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization4Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization4Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "BeginTime",
                            "EndTime",
                            "WaterLevel",
                            "WaveHeightHm0",
                            "WavePeriodTm10",
                            "WaveAngle"});
                table87.AddRow(new string[] {
                            "-7200",
                            "-6840",
                            "0",
                            "0.5",
                            "3",
                            "50"});
                table87.AddRow(new string[] {
                            "-6840",
                            "-6120",
                            "0.1",
                            "0.7",
                            "3.5",
                            "45"});
                table87.AddRow(new string[] {
                            "-6120",
                            "-5040",
                            "0.2",
                            "1",
                            "4",
                            "40"});
                table87.AddRow(new string[] {
                            "-5040",
                            "-3600",
                            "0.3",
                            "1.3",
                            "4.3",
                            "35"});
                table87.AddRow(new string[] {
                            "-3600",
                            "-1800",
                            "0.4",
                            "1.5",
                            "4.5",
                            "30"});
                table87.AddRow(new string[] {
                            "-1800",
                            "360",
                            "0.5",
                            "1.8",
                            "4.8",
                            "25"});
                table87.AddRow(new string[] {
                            "360",
                            "2880",
                            "0.6",
                            "2.1",
                            "5.2",
                            "20"});
                table87.AddRow(new string[] {
                            "2880",
                            "5760",
                            "0.7",
                            "2.5",
                            "5.5",
                            "15"});
                table87.AddRow(new string[] {
                            "5760",
                            "9000",
                            "0.7",
                            "2.8",
                            "5.8",
                            "10"});
                table87.AddRow(new string[] {
                            "9000",
                            "12600",
                            "0.6",
                            "2.8",
                            "6",
                            "5"});
                table87.AddRow(new string[] {
                            "12600",
                            "16560",
                            "0.5",
                            "2.5",
                            "6",
                            "0"});
                table87.AddRow(new string[] {
                            "16560",
                            "20880",
                            "0.4",
                            "2.1",
                            "5.8",
                            "0"});
                table87.AddRow(new string[] {
                            "20880",
                            "25560",
                            "0.3",
                            "1.8",
                            "5.5",
                            "5"});
                table87.AddRow(new string[] {
                            "25560",
                            "30600",
                            "0.2",
                            "1.5",
                            "5.2",
                            "10"});
                table87.AddRow(new string[] {
                            "30600",
                            "36000",
                            "0.1",
                            "1.3",
                            "4.8",
                            "15"});
                table87.AddRow(new string[] {
                            "36000",
                            "43200",
                            "0",
                            "1",
                            "4.5",
                            "20"});
#line 101
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table87, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartPointX",
                            "StartPointZ",
                            "EndPointX",
                            "EndPointZ"});
                table88.AddRow(new string[] {
                            "0",
                            "0",
                            "25",
                            "7.5"});
#line 119
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table88, "And ");
#line hidden
                TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "CharacteristicPointType"});
                table89.AddRow(new string[] {
                            "0",
                            "OuterToe"});
                table89.AddRow(new string[] {
                            "25",
                            "OuterCrest"});
#line 122
 testRunner.And("the following dike profile point data:", ((string)(null)), table89, "And ");
#line hidden
                TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType"});
                table90.AddRow(new string[] {
                            "3",
                            "0.3",
                            "ClosedSod"});
#line 126
 testRunner.And("the following grass revetment wave runup location construction properties:", ((string)(null)), table90, "And ");
#line hidden
#line 129
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 130
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
