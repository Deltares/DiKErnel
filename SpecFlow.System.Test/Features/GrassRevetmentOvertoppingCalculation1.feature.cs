// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.System.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GrassRevetmentOvertoppingCalculation1")]
    public partial class GrassRevetmentOvertoppingCalculation1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "GrassRevetmentOvertoppingCalculation1.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GrassRevetmentOvertoppingCalculation1", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "BeginTime",
                        "EndTime",
                        "WaterLevel",
                        "WaveHeightHm0",
                        "WavePeriodTm10",
                        "WaveAngle"});
            table23.AddRow(new string[] {
                        "0",
                        "3600",
                        "5.5",
                        "1.9",
                        "4.7",
                        "-10"});
            table23.AddRow(new string[] {
                        "3600",
                        "7200",
                        "5.6",
                        "1.95",
                        "4.73",
                        "-8"});
            table23.AddRow(new string[] {
                        "7200",
                        "10800",
                        "5.7",
                        "2",
                        "4.76",
                        "-6"});
            table23.AddRow(new string[] {
                        "10800",
                        "14400",
                        "5.8",
                        "2.05",
                        "4.79",
                        "-4"});
            table23.AddRow(new string[] {
                        "14400",
                        "18000",
                        "5.9",
                        "2.1",
                        "4.82",
                        "-2"});
            table23.AddRow(new string[] {
                        "18000",
                        "21600",
                        "6",
                        "2.15",
                        "4.85",
                        "0"});
            table23.AddRow(new string[] {
                        "21600",
                        "25200",
                        "6.1",
                        "2.2",
                        "4.88",
                        "2"});
            table23.AddRow(new string[] {
                        "25200",
                        "28800",
                        "6.2",
                        "2.25",
                        "4.91",
                        "4"});
            table23.AddRow(new string[] {
                        "28800",
                        "32400",
                        "6.2",
                        "2.3",
                        "4.94",
                        "6"});
            table23.AddRow(new string[] {
                        "32400",
                        "36000",
                        "6.1",
                        "2.35",
                        "4.97",
                        "8"});
            table23.AddRow(new string[] {
                        "36000",
                        "39600",
                        "6",
                        "2.4",
                        "5",
                        "10"});
            table23.AddRow(new string[] {
                        "39600",
                        "43200",
                        "5.9",
                        "2.45",
                        "5.03",
                        "12"});
            table23.AddRow(new string[] {
                        "43200",
                        "46800",
                        "5.8",
                        "2.5",
                        "5.06",
                        "14"});
            table23.AddRow(new string[] {
                        "46800",
                        "50400",
                        "5.7",
                        "2.55",
                        "5.09",
                        "16"});
            table23.AddRow(new string[] {
                        "50400",
                        "54000",
                        "5.6",
                        "2.6",
                        "5.12",
                        "18"});
            table23.AddRow(new string[] {
                        "54000",
                        "57600",
                        "5.5",
                        "2.65",
                        "5.15",
                        "20"});
#line 5
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table23, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "StartPointX",
                        "StartPointZ",
                        "EndPointX",
                        "EndPointZ",
                        "roughnessCoefficient"});
            table24.AddRow(new string[] {
                        "0",
                        "-0.1",
                        "5",
                        "0",
                        "1"});
            table24.AddRow(new string[] {
                        "5",
                        "0",
                        "15",
                        "3",
                        "1"});
            table24.AddRow(new string[] {
                        "15",
                        "3",
                        "22",
                        "3.2",
                        "0.75"});
            table24.AddRow(new string[] {
                        "22",
                        "3.2",
                        "30",
                        "7.5",
                        "0.5"});
            table24.AddRow(new string[] {
                        "30",
                        "7.5",
                        "31",
                        "7.6",
                        "0.8"});
            table24.AddRow(new string[] {
                        "31",
                        "7.6",
                        "34",
                        "7.7",
                        "0.8"});
            table24.AddRow(new string[] {
                        "34",
                        "7.7",
                        "35",
                        "7.4",
                        "0.8"});
            table24.AddRow(new string[] {
                        "35",
                        "7.4",
                        "45",
                        "5",
                        "0.8"});
            table24.AddRow(new string[] {
                        "45",
                        "5",
                        "60",
                        "0.5",
                        "0.8"});
            table24.AddRow(new string[] {
                        "60",
                        "0.5",
                        "70",
                        "0.5",
                        "0.8"});
#line 23
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "X",
                        "CharacteristicPointType"});
            table25.AddRow(new string[] {
                        "5",
                        "OuterToe"});
            table25.AddRow(new string[] {
                        "15",
                        "CrestOuterBerm"});
            table25.AddRow(new string[] {
                        "22",
                        "NotchOuterBerm"});
            table25.AddRow(new string[] {
                        "30",
                        "OuterCrest"});
            table25.AddRow(new string[] {
                        "35",
                        "InnerCrest"});
            table25.AddRow(new string[] {
                        "60",
                        "InnerToe"});
#line 35
 testRunner.And("the following dike profile point data:", ((string)(null)), table25, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType",
                            "InitialDamage"});
                table26.AddRow(new string[] {
                            "50",
                            "ClosedSod",
                            "0.2"});
#line 45
 testRunner.Given("the following location construction:", ((string)(null)), table26, "Given ");
#line hidden
#line 49
 testRunner.When("I add the grass overtopping location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType",
                            "InitialDamage"});
                table27.AddRow(new string[] {
                            "33",
                            "ClosedSod",
                            "0.02"});
#line 53
 testRunner.Given("the following location construction:", ((string)(null)), table27, "Given ");
#line hidden
#line 57
 testRunner.When("I add the grass overtopping location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType",
                            "InitialDamage",
                            "DikeHeight"});
                table28.AddRow(new string[] {
                            "33",
                            "ClosedSod",
                            "0.02",
                            "8"});
#line 61
 testRunner.Given("the following location construction:", ((string)(null)), table28, "Given ");
#line hidden
#line 66
 testRunner.When("I add the grass overtopping location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType",
                            "InitialDamage",
                            "DikeHeight"});
                table29.AddRow(new string[] {
                            "33",
                            "ClosedSod",
                            "0.02",
                            "5.65"});
#line 69
 testRunner.Given("the following location construction:", ((string)(null)), table29, "Given ");
#line hidden
#line 74
 testRunner.When("I add the grass overtopping location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
