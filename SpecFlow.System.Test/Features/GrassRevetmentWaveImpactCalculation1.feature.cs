// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.SystemTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GrassRevetmentWaveImpactCalculation1")]
    public partial class GrassRevetmentWaveImpactCalculation1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "GrassRevetmentWaveImpactCalculation1.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GrassRevetmentWaveImpactCalculation1", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "BeginTime",
                        "EndTime",
                        "WaterLevel",
                        "WaveHeightHm0",
                        "WavePeriodTm10",
                        "WaveAngle"});
            table45.AddRow(new string[] {
                        "0",
                        "900",
                        "0.5",
                        "0.5",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "900",
                        "1800",
                        "0.55",
                        "0.6",
                        "3",
                        "15"});
            table45.AddRow(new string[] {
                        "1800",
                        "2700",
                        "0.6",
                        "0.65",
                        "3",
                        "30"});
            table45.AddRow(new string[] {
                        "2700",
                        "3600",
                        "0.65",
                        "0.7",
                        "3",
                        "45"});
            table45.AddRow(new string[] {
                        "3600",
                        "4500",
                        "0.7",
                        "0.75",
                        "3",
                        "60"});
            table45.AddRow(new string[] {
                        "4500",
                        "5400",
                        "0.75",
                        "0.8",
                        "3",
                        "70"});
            table45.AddRow(new string[] {
                        "5400",
                        "6300",
                        "0.8",
                        "0.85",
                        "3",
                        "75"});
            table45.AddRow(new string[] {
                        "6300",
                        "7200",
                        "0.85",
                        "0.9",
                        "3",
                        "70"});
            table45.AddRow(new string[] {
                        "7200",
                        "8100",
                        "0.9",
                        "0.95",
                        "3",
                        "60"});
            table45.AddRow(new string[] {
                        "8100",
                        "9000",
                        "0.95",
                        "1",
                        "3",
                        "45"});
            table45.AddRow(new string[] {
                        "9000",
                        "9900",
                        "1",
                        "1.1",
                        "3",
                        "30"});
            table45.AddRow(new string[] {
                        "9900",
                        "10800",
                        "1.03",
                        "1.1",
                        "3",
                        "15"});
            table45.AddRow(new string[] {
                        "10800",
                        "11700",
                        "1.03",
                        "1.15",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "11700",
                        "12600",
                        "1",
                        "1.2",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "12600",
                        "13500",
                        "0.95",
                        "1.23",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "13500",
                        "14400",
                        "0.9",
                        "1.2",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "14400",
                        "15300",
                        "0.85",
                        "1.15",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "15300",
                        "16200",
                        "0.8",
                        "1.1",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "16200",
                        "17100",
                        "0.75",
                        "1",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "17100",
                        "18000",
                        "0.7",
                        "1",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "18000",
                        "18900",
                        "0.65",
                        "0.95",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "18900",
                        "19800",
                        "0.6",
                        "0.95",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "19800",
                        "20700",
                        "0.55",
                        "0.9",
                        "3",
                        "0"});
            table45.AddRow(new string[] {
                        "20700",
                        "21600",
                        "0.5",
                        "0.9",
                        "3",
                        "0"});
#line 5
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table45, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "StartPointX",
                        "StartPointZ",
                        "EndPointX",
                        "EndPointZ"});
            table46.AddRow(new string[] {
                        "5",
                        "-1",
                        "55",
                        "11.5"});
#line 31
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table46, "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "X",
                        "CharacteristicPointType"});
            table47.AddRow(new string[] {
                        "5",
                        "OuterToe"});
            table47.AddRow(new string[] {
                        "55",
                        "OuterCrest"});
#line 34
 testRunner.And("the following dike profile point data:", ((string)(null)), table47, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType"});
                table48.AddRow(new string[] {
                            "11",
                            "ClosedSod"});
#line 39
 testRunner.Given("the following location construction:", ((string)(null)), table48, "Given ");
#line hidden
#line 42
 testRunner.When("I add the grass wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType"});
                table49.AddRow(new string[] {
                            "11",
                            "ClosedSod"});
#line 46
 testRunner.Given("the following location construction:", ((string)(null)), table49, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "TimeLineAgwi",
                            "TimeLineBgwi",
                            "TimeLineCgwi"});
                table50.AddRow(new string[] {
                            "1.1",
                            "-0.00003",
                            "0.3"});
#line 49
 testRunner.Given("the following location construction properties:", ((string)(null)), table50, "Given ");
#line hidden
#line 52
 testRunner.When("I add the grass wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType"});
                table51.AddRow(new string[] {
                            "11",
                            "ClosedSod"});
#line 56
 testRunner.Given("the following location construction:", ((string)(null)), table51, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "InitialDamage",
                            "FailureNumber"});
                table52.AddRow(new string[] {
                            "0.4",
                            "1.2"});
#line 59
 testRunner.Given("the following location construction properties:", ((string)(null)), table52, "Given ");
#line hidden
#line 62
 testRunner.When("I add the grass wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType"});
                table53.AddRow(new string[] {
                            "11",
                            "ClosedSod"});
#line 66
 testRunner.Given("the following location construction:", ((string)(null)), table53, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "WaveAngleImpactNwa",
                            "WaveAngleImpactQwa",
                            "WaveAngleImpactRwa"});
                table54.AddRow(new string[] {
                            "0.8",
                            "0.5",
                            "40"});
#line 69
 testRunner.Given("the following location construction properties:", ((string)(null)), table54, "Given ");
#line hidden
#line 72
 testRunner.When("I add the grass wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase5_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase5_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase5_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType"});
                table55.AddRow(new string[] {
                            "11",
                            "ClosedSod"});
#line 76
 testRunner.Given("the following location construction:", ((string)(null)), table55, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "UpperLimitLoadingAul",
                            "LowerLimitLoadingAll"});
                table56.AddRow(new string[] {
                            "0.1",
                            "0.45"});
#line 79
 testRunner.Given("the following location construction properties:", ((string)(null)), table56, "Given ");
#line hidden
#line 82
 testRunner.When("I add the grass wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
