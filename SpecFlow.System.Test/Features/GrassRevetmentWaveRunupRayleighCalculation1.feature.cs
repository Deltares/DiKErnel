// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.System.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GrassRevetmentWaveImpactCalculation1")]
    public partial class GrassRevetmentWaveImpactCalculation1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "GrassRevetmentWaveRunupRayleighCalculation1.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GrassRevetmentWaveImpactCalculation1", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "BeginTime",
                        "EndTime",
                        "WaterLevel",
                        "WaveHeightHm0",
                        "WavePeriodTm10",
                        "WaveAngle"});
            table65.AddRow(new string[] {
                        "0",
                        "3600",
                        "0",
                        "0.5",
                        "3",
                        "50"});
            table65.AddRow(new string[] {
                        "3600",
                        "7200",
                        "0.1",
                        "0.7",
                        "3.5",
                        "45"});
            table65.AddRow(new string[] {
                        "7200",
                        "10800",
                        "0.2",
                        "1",
                        "4",
                        "40"});
            table65.AddRow(new string[] {
                        "10800",
                        "14400",
                        "0.3",
                        "1.3",
                        "4.3",
                        "35"});
            table65.AddRow(new string[] {
                        "14400",
                        "18000",
                        "0.4",
                        "1.5",
                        "4.5",
                        "30"});
            table65.AddRow(new string[] {
                        "18000",
                        "21600",
                        "0.5",
                        "1.8",
                        "4.8",
                        "25"});
            table65.AddRow(new string[] {
                        "21600",
                        "25200",
                        "0.6",
                        "2.1",
                        "5.2",
                        "20"});
            table65.AddRow(new string[] {
                        "25200",
                        "28800",
                        "0.7",
                        "2.5",
                        "5.5",
                        "15"});
            table65.AddRow(new string[] {
                        "28800",
                        "32400",
                        "0.7",
                        "2.8",
                        "5.8",
                        "10"});
            table65.AddRow(new string[] {
                        "32400",
                        "36000",
                        "0.6",
                        "2.8",
                        "6",
                        "5"});
            table65.AddRow(new string[] {
                        "36000",
                        "39600",
                        "0.5",
                        "2.5",
                        "6",
                        "0"});
            table65.AddRow(new string[] {
                        "39600",
                        "43200",
                        "0.4",
                        "2.1",
                        "5.8",
                        "0"});
            table65.AddRow(new string[] {
                        "43200",
                        "46800",
                        "0.3",
                        "1.8",
                        "5.5",
                        "5"});
            table65.AddRow(new string[] {
                        "46800",
                        "50400",
                        "0.2",
                        "1.5",
                        "5.2",
                        "10"});
            table65.AddRow(new string[] {
                        "50400",
                        "54000",
                        "0.1",
                        "1.3",
                        "4.8",
                        "15"});
            table65.AddRow(new string[] {
                        "54000",
                        "57600",
                        "0",
                        "1",
                        "4.5",
                        "20"});
#line 5
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table65, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "StartPointX",
                        "StartPointZ",
                        "EndPointX",
                        "EndPointZ"});
            table66.AddRow(new string[] {
                        "0",
                        "0",
                        "25",
                        "7.5"});
#line 23
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table66, "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "X",
                        "CharacteristicPointType"});
            table67.AddRow(new string[] {
                        "0",
                        "OuterToe"});
            table67.AddRow(new string[] {
                        "25",
                        "OuterCrest"});
#line 26
 testRunner.And("the following dike profile point data:", ((string)(null)), table67, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType"});
                table68.AddRow(new string[] {
                            "3",
                            "0.3",
                            "ClosedSod"});
#line 32
 testRunner.Given("the following grass revetment wave runup location construction properties:", ((string)(null)), table68, "Given ");
#line hidden
#line 35
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase2_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType",
                            "CriticalCumulativeOverload",
                            "CriticalFrontVelocity"});
                table69.AddRow(new string[] {
                            "3",
                            "0.3",
                            "ClosedSod",
                            "8000",
                            "6.2"});
#line 39
 testRunner.Given("the following grass revetment wave runup location construction properties:", ((string)(null)), table69, "Given ");
#line hidden
#line 42
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase3_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType",
                            "FixedNumberOfWaves",
                            "FrontVelocityCu"});
                table70.AddRow(new string[] {
                            "3",
                            "0.3",
                            "ClosedSod",
                            "500",
                            "1.15"});
#line 46
 testRunner.Given("the following grass revetment wave runup location construction properties:", ((string)(null)), table70, "Given ");
#line hidden
#line 49
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase4_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType",
                            "RepresentativeWaveRunup2PAru",
                            "RepresentativeWaveRunup2PBru",
                            "RepresentativeWaveRunup2PCru"});
                table71.AddRow(new string[] {
                            "3",
                            "0.3",
                            "ClosedSod",
                            "1.75",
                            "4.3",
                            "1,6"});
#line 53
 testRunner.Given("the following grass revetment wave runup location construction properties:", ((string)(null)), table71, "Given ");
#line hidden
#line 56
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase5_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase5_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase5_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType",
                            "RepresentativeWaveRunup2PGammab",
                            "RepresentativeWaveRunup2PGammaf"});
                table72.AddRow(new string[] {
                            "3",
                            "0.3",
                            "OpenSod",
                            "0.7",
                            "0.7"});
#line 60
 testRunner.Given("the following grass revetment wave runup location construction properties:", ((string)(null)), table72, "Given ");
#line hidden
#line 63
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase6_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase6_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase6_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType",
                            "WaveAngleImpactAbeta",
                            "WaveAngleImpactBetamax",
                            "AverageNumberOfWavesCtm"});
                table73.AddRow(new string[] {
                            "3",
                            "0.3",
                            "ClosedSod",
                            "0.0033",
                            "30",
                            "1"});
#line 67
 testRunner.Given("the following grass revetment wave runup location construction properties:", ((string)(null)), table73, "Given ");
#line hidden
#line 70
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization1Testcase7_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization1Testcase7_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization1Testcase7_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "outerSlope",
                            "GrassRevetmentTopLayerType",
                            "InitialDamage",
                            "FailureNumber"});
                table74.AddRow(new string[] {
                            "3",
                            "0.3",
                            "ClosedSod",
                            "0.3",
                            "1.1"});
#line 74
 testRunner.Given("the following grass revetment wave runup location construction properties:", ((string)(null)), table74, "Given ");
#line hidden
#line 77
 testRunner.When("I add the grass wave runup rayleigh location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
