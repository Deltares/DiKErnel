// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.SystemTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GrassRevetmentWaveImpactCalculation2")]
    public partial class GrassRevetmentWaveImpactCalculation2Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "GrassRevetmentWaveImpactCalculation2.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GrassRevetmentWaveImpactCalculation2", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization2Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization2Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization2Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "BeginTime",
                            "EndTime",
                            "WaterLevel",
                            "WaveHeightHm0",
                            "WavePeriodTm10",
                            "WaveAngle"});
                table57.AddRow(new string[] {
                            "0",
                            "900",
                            "0.5",
                            "0.3",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "900",
                            "1800",
                            "0.55",
                            "0.4",
                            "3",
                            "15"});
                table57.AddRow(new string[] {
                            "1800",
                            "2700",
                            "0.6",
                            "0.45",
                            "3",
                            "30"});
                table57.AddRow(new string[] {
                            "2700",
                            "3600",
                            "0.65",
                            "0.5",
                            "3",
                            "45"});
                table57.AddRow(new string[] {
                            "3600",
                            "4500",
                            "0.7",
                            "0.55",
                            "3",
                            "60"});
                table57.AddRow(new string[] {
                            "4500",
                            "5400",
                            "0.75",
                            "0.6",
                            "3",
                            "70"});
                table57.AddRow(new string[] {
                            "5400",
                            "6300",
                            "0.8",
                            "0.65",
                            "3",
                            "75"});
                table57.AddRow(new string[] {
                            "6300",
                            "7200",
                            "0.85",
                            "0.7",
                            "3",
                            "70"});
                table57.AddRow(new string[] {
                            "7200",
                            "8100",
                            "0.9",
                            "0.75",
                            "3",
                            "60"});
                table57.AddRow(new string[] {
                            "8100",
                            "9000",
                            "0.95",
                            "0.8",
                            "3",
                            "45"});
                table57.AddRow(new string[] {
                            "9000",
                            "9900",
                            "1",
                            "0.9",
                            "3",
                            "30"});
                table57.AddRow(new string[] {
                            "9900",
                            "10800",
                            "1.03",
                            "0.9",
                            "3",
                            "15"});
                table57.AddRow(new string[] {
                            "10800",
                            "11700",
                            "1.03",
                            "0.95",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "11700",
                            "12600",
                            "1",
                            "1",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "12600",
                            "13500",
                            "0.95",
                            "1.03",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "13500",
                            "14400",
                            "0.9",
                            "1",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "14400",
                            "15300",
                            "0.85",
                            "0.95",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "15300",
                            "16200",
                            "0.8",
                            "0.9",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "16200",
                            "17100",
                            "0.75",
                            "0.8",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "17100",
                            "18000",
                            "0.7",
                            "0.8",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "18000",
                            "18900",
                            "0.65",
                            "0.75",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "18900",
                            "19800",
                            "0.6",
                            "0.75",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "19800",
                            "20700",
                            "0.55",
                            "0.7",
                            "3",
                            "0"});
                table57.AddRow(new string[] {
                            "20700",
                            "21600",
                            "0.5",
                            "0.7",
                            "3",
                            "0"});
#line 4
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table57, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartPointX",
                            "StartPointZ",
                            "EndPointX",
                            "EndPointZ"});
                table58.AddRow(new string[] {
                            "5",
                            "-1",
                            "55",
                            "11.5"});
#line 30
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table58, "And ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "CharacteristicPointType"});
                table59.AddRow(new string[] {
                            "5",
                            "OuterToe"});
                table59.AddRow(new string[] {
                            "55",
                            "OuterCrest"});
#line 33
 testRunner.And("the following dike profile point data:", ((string)(null)), table59, "And ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType"});
                table60.AddRow(new string[] {
                            "11",
                            "ClosedSod"});
#line 37
 testRunner.And("the following location construction:", ((string)(null)), table60, "And ");
#line hidden
#line 40
 testRunner.When("I add the grass wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GivenCalculationInputForSchematization3Testcase1_WhenCalculating_ThenReturnsExpec" +
            "tedCalculationResult")]
        public void GivenCalculationInputForSchematization3Testcase1_WhenCalculating_ThenReturnsExpectedCalculationResult()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GivenCalculationInputForSchematization3Testcase1_WhenCalculating_ThenReturnsExpec" +
                    "tedCalculationResult", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "BeginTime",
                            "EndTime",
                            "WaterLevel",
                            "WaveHeightHm0",
                            "WavePeriodTm10",
                            "WaveAngle"});
                table61.AddRow(new string[] {
                            "-3600",
                            "-3510",
                            "0.5",
                            "0.5",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "-3510",
                            "-3330",
                            "0.55",
                            "0.6",
                            "3",
                            "15"});
                table61.AddRow(new string[] {
                            "- 3330",
                            "-3060",
                            "0.6",
                            "0.65",
                            "3",
                            "30"});
                table61.AddRow(new string[] {
                            "- 3060",
                            "-2700",
                            "0.65",
                            "0.7",
                            "3",
                            "45"});
                table61.AddRow(new string[] {
                            "- 2700",
                            "-2250",
                            "0.7",
                            "0.75",
                            "3",
                            "60"});
                table61.AddRow(new string[] {
                            "- 2250",
                            "-1710",
                            "0.75",
                            "0.8",
                            "3",
                            "70"});
                table61.AddRow(new string[] {
                            "- 1710",
                            "-1080",
                            "0.8",
                            "0.85",
                            "3",
                            "75"});
                table61.AddRow(new string[] {
                            "- 1080",
                            "-360",
                            "0.85",
                            "0.9",
                            "3",
                            "70"});
                table61.AddRow(new string[] {
                            "- 360",
                            "450",
                            "0.9",
                            "0.95",
                            "3",
                            "60"});
                table61.AddRow(new string[] {
                            "450",
                            "1350",
                            "0.95",
                            "1",
                            "3",
                            "45"});
                table61.AddRow(new string[] {
                            "1350",
                            "2340",
                            "1",
                            "1.1",
                            "3",
                            "30"});
                table61.AddRow(new string[] {
                            "2340",
                            "3420",
                            "1.03",
                            "1.1",
                            "3",
                            "15"});
                table61.AddRow(new string[] {
                            "3420",
                            "4590",
                            "1.03",
                            "1.15",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "4590",
                            "5850",
                            "1",
                            "1.2",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "5850",
                            "7200",
                            "0.95",
                            "1.23",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "7200",
                            "8640",
                            "0.9",
                            "1.2",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "8640",
                            "10170",
                            "0.85",
                            "1.15",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "10170",
                            "11790",
                            "0.8",
                            "1.1",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "11790",
                            "13500",
                            "0.75",
                            "1",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "13500",
                            "15300",
                            "0.7",
                            "1",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "15300",
                            "17190",
                            "0.65",
                            "0.95",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "17190",
                            "19170",
                            "0.6",
                            "0.95",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "19170",
                            "21240",
                            "0.55",
                            "0.9",
                            "3",
                            "0"});
                table61.AddRow(new string[] {
                            "21240",
                            "21600",
                            "0.5",
                            "0.9",
                            "3",
                            "0"});
#line 44
 testRunner.Given("the following schematisation for time steps:", ((string)(null)), table61, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "StartPointX",
                            "StartPointZ",
                            "EndPointX",
                            "EndPointZ"});
                table62.AddRow(new string[] {
                            "5",
                            "-1",
                            "55",
                            "11.5"});
#line 70
 testRunner.And("the follwoing Dike profile segments:", ((string)(null)), table62, "And ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "CharacteristicPointType"});
                table63.AddRow(new string[] {
                            "5",
                            "OuterToe"});
                table63.AddRow(new string[] {
                            "55",
                            "OuterCrest"});
#line 73
 testRunner.And("the following dike profile point data:d", ((string)(null)), table63, "And ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "X",
                            "GrassRevetmentTopLayerType"});
                table64.AddRow(new string[] {
                            "11",
                            "ClosedSod"});
#line 77
 testRunner.And("the following location construction:", ((string)(null)), table64, "And ");
#line hidden
#line 80
 testRunner.When("I add the grass wave impact location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
