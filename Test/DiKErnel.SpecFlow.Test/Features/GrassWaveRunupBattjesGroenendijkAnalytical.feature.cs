// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DiKErnel.SpecFlow.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GrassWaveRunupBattjesGroenendijkAnalytical")]
    public partial class GrassWaveRunupBattjesGroenendijkAnalyticalFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "GrassWaveRunupBattjesGroenendijkAnalytical.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GrassWaveRunupBattjesGroenendijkAnalytical", "\tAs a user I want to perform grass wave run-up calculations based on Battjes-Groe" +
                    "nendijk analytical.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
 #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "tijdstippen"});
            table1.AddRow(new string[] {
                        "0"});
            table1.AddRow(new string[] {
                        "3600"});
            table1.AddRow(new string[] {
                        "7200"});
            table1.AddRow(new string[] {
                        "10800"});
            table1.AddRow(new string[] {
                        "14400"});
            table1.AddRow(new string[] {
                        "18000"});
            table1.AddRow(new string[] {
                        "21600"});
            table1.AddRow(new string[] {
                        "25200"});
            table1.AddRow(new string[] {
                        "28800"});
            table1.AddRow(new string[] {
                        "32400"});
            table1.AddRow(new string[] {
                        "36000"});
            table1.AddRow(new string[] {
                        "39600"});
            table1.AddRow(new string[] {
                        "43200"});
            table1.AddRow(new string[] {
                        "46800"});
            table1.AddRow(new string[] {
                        "50400"});
            table1.AddRow(new string[] {
                        "54000"});
            table1.AddRow(new string[] {
                        "57600"});
#line 5
  testRunner.Given("the following tijdstippen:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "waterstanden",
                        "golfhoogtenHm0",
                        "golfperiodenTm10",
                        "golfrichtingen"});
            table2.AddRow(new string[] {
                        "3",
                        "0.5",
                        "3",
                        "50"});
            table2.AddRow(new string[] {
                        "3.1",
                        "0.7",
                        "3.5",
                        "45"});
            table2.AddRow(new string[] {
                        "3.2",
                        "1",
                        "4",
                        "40"});
            table2.AddRow(new string[] {
                        "3.3",
                        "1.3",
                        "4.3",
                        "35"});
            table2.AddRow(new string[] {
                        "3.4",
                        "1.5",
                        "4.5",
                        "30"});
            table2.AddRow(new string[] {
                        "3.5",
                        "1.8",
                        "4.8",
                        "25"});
            table2.AddRow(new string[] {
                        "3.6",
                        "2.1",
                        "5.2",
                        "20"});
            table2.AddRow(new string[] {
                        "3.7",
                        "2.5",
                        "5.5",
                        "15"});
            table2.AddRow(new string[] {
                        "3.7",
                        "2.8",
                        "5.8",
                        "10"});
            table2.AddRow(new string[] {
                        "3.6",
                        "2.8",
                        "6",
                        "5"});
            table2.AddRow(new string[] {
                        "3.5",
                        "2.5",
                        "6",
                        "0"});
            table2.AddRow(new string[] {
                        "3.4",
                        "2.1",
                        "5.8",
                        "0"});
            table2.AddRow(new string[] {
                        "3.3",
                        "1.8",
                        "5.5",
                        "5"});
            table2.AddRow(new string[] {
                        "3.2",
                        "1.5",
                        "5.2",
                        "10"});
            table2.AddRow(new string[] {
                        "3.1",
                        "1.3",
                        "4.8",
                        "15"});
            table2.AddRow(new string[] {
                        "3",
                        "1",
                        "4.5",
                        "20"});
#line 24
   testRunner.And("the following hydraulischeBelastingen:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "dijkorientatie",
                        "posities",
                        "hoogten",
                        "ruwheidscoefficienten",
                        "teenBuitenzijde",
                        "kruinBuitenzijde"});
            table3.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "1.0",
                        "0",
                        "25"});
            table3.AddRow(new string[] {
                        "",
                        "25",
                        "7.5",
                        "",
                        "",
                        ""});
#line 42
     testRunner.And("the following dijkprofiel:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "positie",
                        "rekenmethode",
                        "typeToplaag",
                        "beginschade",
                        "verhogingBelastingOvergangAlfaM",
                        "verlagingSterkteOvergangAlfaS"});
            table4.AddRow(new string[] {
                        "15",
                        "grasGolfoploop",
                        "grasGeslotenZode",
                        "0",
                        "1",
                        "1"});
#line 46
     testRunner.And("the following locaties:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "rekenmethode",
                        "faalgetal",
                        "factorCtm",
                        "typeRekenprotocol",
                        "frontsnelheid",
                        "bodemVoorlandZ",
                        "tanAvl",
                        "typeToplaag"});
            table5.AddRow(new string[] {
                        "grasGolfoploop",
                        "1",
                        "0.92",
                        "battjesGroenendijkAnalytisch",
                        "1.1",
                        "-4.0",
                        "0.004",
                        "grasGeslotenZode"});
#line 49
     testRunner.And("the following rekenmethoden:", ((string)(null)), table5, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 1 - Default with closed sod")]
        public virtual void Testcase1_DefaultWithClosedSod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 1 - Default with closed sod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 53
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
#line 54
  testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
  testRunner.Then("the schadegetal is 5.964275964074604", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 2 - Default with open sod")]
        public virtual void Testcase2_DefaultWithOpenSod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 2 - Default with open sod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 57
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "typeToplaag"});
                table6.AddRow(new string[] {
                            "grasOpenZode"});
#line 58
  testRunner.Given("the following values are adjusted:", ((string)(null)), table6, "Given ");
#line hidden
#line 61
     testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 3")]
        public virtual void Testcase3()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 3", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 64
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "kritiekeCumulatieveOverbelasting",
                            "kritiekeFrontsnelheid"});
                table7.AddRow(new string[] {
                            "8000",
                            "6.2"});
#line 65
     testRunner.Given("the following values are adjusted:", ((string)(null)), table7, "Given ");
#line hidden
#line 68
     testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 4")]
        public virtual void Testcase4()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 4", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 71
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "frontsnelheid"});
                table8.AddRow(new string[] {
                            "1.15"});
#line 72
  testRunner.Given("the following values are adjusted:", ((string)(null)), table8, "Given ");
#line hidden
#line 75
  testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 5")]
        public virtual void Testcase5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 5", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 78
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "verhogingBelastingOvergangAlfaM",
                            "verlagingSterkteOvergangAlfaS"});
                table9.AddRow(new string[] {
                            "1.8",
                            "0.9"});
#line 79
  testRunner.Given("the following values are adjusted:", ((string)(null)), table9, "Given ");
#line hidden
#line 82
  testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 6")]
        public virtual void Testcase6()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 6", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "bodemVoorlandZ",
                            "tanAvl"});
                table10.AddRow(new string[] {
                            "0",
                            "0.05"});
#line 86
  testRunner.Given("the following values are adjusted:", ((string)(null)), table10, "Given ");
#line hidden
#line 89
  testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 7")]
        public virtual void Testcase7()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 7", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 92
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "beginschade",
                            "faalgetal"});
                table11.AddRow(new string[] {
                            "0.3",
                            "1.2"});
#line 93
  testRunner.Given("the following values are adjusted:", ((string)(null)), table11, "Given ");
#line hidden
#line 96
  testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 8")]
        public virtual void Testcase8()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 8", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 99
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table12.AddRow(new string[] {
                            "0",
                            "0",
                            "0.85"});
                table12.AddRow(new string[] {
                            "15",
                            "4",
                            "0.5"});
                table12.AddRow(new string[] {
                            "20",
                            "4.1",
                            "0.95"});
                table12.AddRow(new string[] {
                            "25",
                            "7.5",
                            ""});
#line 100
  testRunner.Given("the following series are adjusted:", ((string)(null)), table12, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "dijkorientatie",
                            "positie"});
                table13.AddRow(new string[] {
                            "20",
                            "15"});
#line 106
  testRunner.And("the following values are adjusted:", ((string)(null)), table13, "And ");
#line hidden
#line 109
  testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 9")]
        public virtual void Testcase9()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 9", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table14.AddRow(new string[] {
                            "0",
                            "0",
                            "0.7"});
                table14.AddRow(new string[] {
                            "15",
                            "5",
                            "0.8"});
                table14.AddRow(new string[] {
                            "20",
                            "5.1",
                            "1"});
                table14.AddRow(new string[] {
                            "30",
                            "7.5",
                            ""});
#line 113
  testRunner.Given("the following series are adjusted:", ((string)(null)), table14, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "dijkorientatie",
                            "positie",
                            "bodemVoorlandZ",
                            "tanAvl"});
                table15.AddRow(new string[] {
                            "30",
                            "18",
                            "1",
                            "0.009"});
#line 119
  testRunner.And("the following values are adjusted:", ((string)(null)), table15, "And ");
#line hidden
#line 122
  testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 10")]
        public virtual void Testcase10()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 10", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 125
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "tijdstippen",
                            "waterstanden",
                            "golfhoogtenHm0",
                            "golfperiodenTm10",
                            "golfrichtingen"});
                table16.AddRow(new string[] {
                            "-6840",
                            "3.5",
                            "2.4",
                            "4",
                            "20"});
                table16.AddRow(new string[] {
                            "-6120",
                            "3.6",
                            "2.5",
                            "4.2",
                            "20"});
                table16.AddRow(new string[] {
                            "-5040",
                            "3.7",
                            "2.7",
                            "4.4",
                            "20"});
                table16.AddRow(new string[] {
                            "-3600",
                            "3.8",
                            "2.8",
                            "4.5",
                            "20"});
                table16.AddRow(new string[] {
                            "-1800",
                            "3.9",
                            "2.9",
                            "4.8",
                            "20"});
                table16.AddRow(new string[] {
                            "360",
                            "3.95",
                            "3",
                            "5",
                            "20"});
                table16.AddRow(new string[] {
                            "2880",
                            "4",
                            "2.9",
                            "5.2",
                            "20"});
                table16.AddRow(new string[] {
                            "5760",
                            "3.95",
                            "2.9",
                            "5.5",
                            "15"});
                table16.AddRow(new string[] {
                            "9000",
                            "3.8",
                            "2.8",
                            "5.8",
                            "10"});
                table16.AddRow(new string[] {
                            "12600",
                            "3.6",
                            "2.8",
                            "6",
                            "5"});
                table16.AddRow(new string[] {
                            "16560",
                            "3.5",
                            "2.5",
                            "6",
                            "0"});
                table16.AddRow(new string[] {
                            "20880",
                            "3.4",
                            "2.1",
                            "5.8",
                            "0"});
                table16.AddRow(new string[] {
                            "25560",
                            "3.3",
                            "1.8",
                            "5.5",
                            "5"});
                table16.AddRow(new string[] {
                            "30600",
                            "3.2",
                            "1.5",
                            "5.2",
                            "10"});
                table16.AddRow(new string[] {
                            "36000",
                            "3.1",
                            "1.3",
                            "4.8",
                            "15"});
                table16.AddRow(new string[] {
                            "43200",
                            "3",
                            "1",
                            "4.5",
                            "20"});
#line 126
  testRunner.Given("the following series are adjusted:", ((string)(null)), table16, "Given ");
#line hidden
#line 144
  testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 11")]
        public virtual void Testcase11()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 11", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 147
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "tijdstippen",
                            "waterstanden",
                            "golfhoogtenHm0",
                            "golfperiodenTm10",
                            "golfrichtingen"});
                table17.AddRow(new string[] {
                            "-6840",
                            "3.5",
                            "2.4",
                            "4",
                            "20"});
                table17.AddRow(new string[] {
                            "-6120",
                            "3.6",
                            "2.5",
                            "4.2",
                            "20"});
                table17.AddRow(new string[] {
                            "-5040",
                            "3.7",
                            "2.7",
                            "4.4",
                            "20"});
                table17.AddRow(new string[] {
                            "-3600",
                            "3.8",
                            "2.8",
                            "4.5",
                            "20"});
                table17.AddRow(new string[] {
                            "-1800",
                            "3.9",
                            "2.9",
                            "4.8",
                            "20"});
                table17.AddRow(new string[] {
                            "360",
                            "3.95",
                            "3",
                            "5",
                            "20"});
                table17.AddRow(new string[] {
                            "2880",
                            "4",
                            "2.9",
                            "5.2",
                            "20"});
                table17.AddRow(new string[] {
                            "5760",
                            "3.95",
                            "2.9",
                            "5.5",
                            "15"});
                table17.AddRow(new string[] {
                            "9000",
                            "3.8",
                            "2.8",
                            "5.8",
                            "10"});
                table17.AddRow(new string[] {
                            "12600",
                            "3.6",
                            "2.8",
                            "6",
                            "5"});
                table17.AddRow(new string[] {
                            "16560",
                            "3.5",
                            "2.5",
                            "6",
                            "0"});
                table17.AddRow(new string[] {
                            "20880",
                            "3.4",
                            "2.1",
                            "5.8",
                            "0"});
                table17.AddRow(new string[] {
                            "25560",
                            "3.3",
                            "1.8",
                            "5.5",
                            "5"});
                table17.AddRow(new string[] {
                            "30600",
                            "3.2",
                            "1.5",
                            "5.2",
                            "10"});
                table17.AddRow(new string[] {
                            "36000",
                            "3.1",
                            "1.3",
                            "4.8",
                            "15"});
                table17.AddRow(new string[] {
                            "43200",
                            "3",
                            "1",
                            "4.5",
                            "20"});
#line 148
  testRunner.Given("the following series are adjusted:", ((string)(null)), table17, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table18.AddRow(new string[] {
                            "0",
                            "0",
                            "0.85"});
                table18.AddRow(new string[] {
                            "15",
                            "4",
                            "0.5"});
                table18.AddRow(new string[] {
                            "20",
                            "4.1",
                            "0.95"});
                table18.AddRow(new string[] {
                            "25",
                            "7.5",
                            ""});
#line 166
     testRunner.And("the following series are adjusted:", ((string)(null)), table18, "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "dijkorientatie",
                            "positie",
                            "bodemVoorlandZ",
                            "tanAvl"});
                table19.AddRow(new string[] {
                            "20",
                            "15",
                            "0.5",
                            "0.01"});
#line 172
  testRunner.And("the following values are adjusted:", ((string)(null)), table19, "And ");
#line hidden
#line 175
  testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 12")]
        public virtual void Testcase12()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 12", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 178
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "tijdstippen",
                            "waterstanden",
                            "golfhoogtenHm0",
                            "golfperiodenTm10",
                            "golfrichtingen"});
                table20.AddRow(new string[] {
                            "-6840",
                            "3.5",
                            "2.4",
                            "4",
                            "20"});
                table20.AddRow(new string[] {
                            "-6120",
                            "3.6",
                            "2.5",
                            "4.2",
                            "20"});
                table20.AddRow(new string[] {
                            "-5040",
                            "3.7",
                            "2.7",
                            "4.4",
                            "20"});
                table20.AddRow(new string[] {
                            "-3600",
                            "3.8",
                            "2.8",
                            "4.5",
                            "20"});
                table20.AddRow(new string[] {
                            "-1800",
                            "3.9",
                            "2.9",
                            "4.8",
                            "20"});
                table20.AddRow(new string[] {
                            "360",
                            "3.95",
                            "3",
                            "5",
                            "20"});
                table20.AddRow(new string[] {
                            "2880",
                            "4",
                            "2.9",
                            "5.2",
                            "20"});
                table20.AddRow(new string[] {
                            "5760",
                            "3.95",
                            "2.9",
                            "5.5",
                            "15"});
                table20.AddRow(new string[] {
                            "9000",
                            "3.8",
                            "2.8",
                            "5.8",
                            "10"});
                table20.AddRow(new string[] {
                            "12600",
                            "3.6",
                            "2.8",
                            "6",
                            "5"});
                table20.AddRow(new string[] {
                            "16560",
                            "3.5",
                            "2.5",
                            "6",
                            "0"});
                table20.AddRow(new string[] {
                            "20880",
                            "3.4",
                            "2.1",
                            "5.8",
                            "0"});
                table20.AddRow(new string[] {
                            "25560",
                            "3.3",
                            "1.8",
                            "5.5",
                            "5"});
                table20.AddRow(new string[] {
                            "30600",
                            "3.2",
                            "1.5",
                            "5.2",
                            "10"});
                table20.AddRow(new string[] {
                            "36000",
                            "3.1",
                            "1.3",
                            "4.8",
                            "15"});
                table20.AddRow(new string[] {
                            "43200",
                            "3",
                            "1",
                            "4.5",
                            "20"});
#line 179
  testRunner.Given("the following series are adjusted:", ((string)(null)), table20, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table21.AddRow(new string[] {
                            "0",
                            "0",
                            "0.85"});
                table21.AddRow(new string[] {
                            "15",
                            "4",
                            "0.5"});
                table21.AddRow(new string[] {
                            "20",
                            "4.1",
                            "0.95"});
                table21.AddRow(new string[] {
                            "25",
                            "7.5",
                            ""});
#line 197
  testRunner.And("the following series are adjusted:", ((string)(null)), table21, "And ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "dijkorientatie",
                            "positie"});
                table22.AddRow(new string[] {
                            "20",
                            "15"});
#line 203
  testRunner.And("the following values are adjusted:", ((string)(null)), table22, "And ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "beginschade",
                            "verhogingBelastingOvergangAlfaM",
                            "verlagingSterkteOvergangAlfaS"});
                table23.AddRow(new string[] {
                            "0.1",
                            "1.7",
                            "0.85"});
#line 206
     testRunner.And("the following values are adjusted:", ((string)(null)), table23, "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "faalgetal",
                            "factorCtm",
                            "frontsnelheid",
                            "kritiekeCumulatieveOverbelasting",
                            "kritiekeFrontsnelheid",
                            "bodemVoorlandZ",
                            "tanAvl"});
                table24.AddRow(new string[] {
                            "1.1",
                            "0.89",
                            "1.2",
                            "7500",
                            "5",
                            "-1",
                            "0.008"});
#line 209
      testRunner.And("the following values are adjusted:", ((string)(null)), table24, "And ");
#line hidden
#line 212
  testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 13")]
        public virtual void Testcase13()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 13", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 215
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "waterstanden"});
                table25.AddRow(new string[] {
                            "-3.9"});
                table25.AddRow(new string[] {
                            "8"});
#line 216
  testRunner.Given("the following series are adjusted:", ((string)(null)), table25, "Given ");
#line hidden
#line 220
     testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BM Gras benchmark 14")]
        [NUnit.Framework.TestCaseAttribute("3.5", "698.151", null)]
        [NUnit.Framework.TestCaseAttribute("4", "588.395", null)]
        [NUnit.Framework.TestCaseAttribute("5.5", "7.156", null)]
        [NUnit.Framework.TestCaseAttribute("6.5", "0.000", null)]
        [NUnit.Framework.TestCaseAttribute("8", "0.000", null)]
        public virtual void BMGrasBenchmark14(string kritiekeFrontsnelheid, string cumulatieveOverbelastingTijdstap, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("kritiekeFrontsnelheid", kritiekeFrontsnelheid);
            argumentsOfScenario.Add("cumulatieveOverbelastingTijdstap", cumulatieveOverbelastingTijdstap);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BM Gras benchmark 14", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 223
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "bodemVoorlandZ",
                            "golfhoogtenHm0",
                            "diepteVoorland",
                            "hellingVoorland",
                            "factorCtm",
                            "kritiekeCumulatieveOverbelasting"});
                table26.AddRow(new string[] {
                            "0.1",
                            "1.5",
                            "3",
                            "0.004",
                            "3.85",
                            "7000"});
#line 224
  testRunner.Given("the following constant inputs:", ((string)(null)), table26, "Given ");
#line hidden
#line 227
  testRunner.When(string.Format("I change the property kritiekeFrontsnelheid to a value of {0}", kritiekeFrontsnelheid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 228
  testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 229
  testRunner.Then(string.Format("the output value for {0} is", cumulatieveOverbelastingTijdstap), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BM Gras benchmark 15")]
        [NUnit.Framework.TestCaseAttribute("0", "0.000", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.134", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1.134", null)]
        [NUnit.Framework.TestCaseAttribute("3", "0.139", null)]
        [NUnit.Framework.TestCaseAttribute("4", "0.000", null)]
        [NUnit.Framework.TestCaseAttribute("5", "0.000", null)]
        [NUnit.Framework.TestCaseAttribute("6", "0.000", null)]
        public virtual void BMGrasBenchmark15(string bodemVoorlandZ, string cumulatieveOverbelastingTijdstap, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("bodemVoorlandZ", bodemVoorlandZ);
            argumentsOfScenario.Add("cumulatieveOverbelastingTijdstap", cumulatieveOverbelastingTijdstap);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BM Gras benchmark 15", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 239
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "kritiekeFrontsnelheid",
                            "golfhoogtenHm0",
                            "diepteVoorland",
                            "hellingVoorland",
                            "factorCtm",
                            "kritiekeCumulatieveOverbelasting"});
                table27.AddRow(new string[] {
                            "6.6",
                            "1.5",
                            "3",
                            "0.004",
                            "3.85",
                            "7000"});
#line 240
  testRunner.Given("the following constant inputs:", ((string)(null)), table27, "Given ");
#line hidden
#line 243
     testRunner.When(string.Format("I change the property bodemVoorlandZ to a value of {0}", bodemVoorlandZ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 244
     testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 245
     testRunner.Then(string.Format("the output value for {0} is", cumulatieveOverbelastingTijdstap), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BM Gras benchmark 16")]
        [NUnit.Framework.TestCaseAttribute("0.004", "1.134", null)]
        [NUnit.Framework.TestCaseAttribute("0.04", "13.406", null)]
        public virtual void BMGrasBenchmark16(string hellingVoorland, string cumulatieveOverbelastingTijdstap, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("hellingVoorland", hellingVoorland);
            argumentsOfScenario.Add("cumulatieveOverbelastingTijdstap", cumulatieveOverbelastingTijdstap);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BM Gras benchmark 16", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 257
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "kritiekeFrontsnelheid",
                            "golfhoogtenHm0",
                            "diepteVoorland",
                            "bodemVoorlandZ",
                            "factorCtm",
                            "kritiekeCumulatieveOverbelasting"});
                table28.AddRow(new string[] {
                            "6.6",
                            "1.5",
                            "3",
                            "0.1",
                            "3.85",
                            "7000"});
#line 258
  testRunner.Given("the following constant inputs:", ((string)(null)), table28, "Given ");
#line hidden
#line 261
     testRunner.When(string.Format("I change the property tanAvl to a value of {0}", hellingVoorland), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 262
     testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
     testRunner.Then(string.Format("the output value for {0} is", cumulatieveOverbelastingTijdstap), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BM Gras benchmark 17")]
        [NUnit.Framework.TestCaseAttribute("0.04", "13755.272", null)]
        [NUnit.Framework.TestCaseAttribute("0.1", "5759.070", null)]
        [NUnit.Framework.TestCaseAttribute("0.4", "1031.437", null)]
        [NUnit.Framework.TestCaseAttribute("10", "21.453", null)]
        public virtual void BMGrasBenchmark17(string diepteVoorland, string cumulatieveOverbelastingTijdstap, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("diepteVoorland", diepteVoorland);
            argumentsOfScenario.Add("cumulatieveOverbelastingTijdstap", cumulatieveOverbelastingTijdstap);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BM Gras benchmark 17", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 270
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "kritiekeFrontsnelheid",
                            "golfhoogtenHm0",
                            "hellingVoorland",
                            "bodemVoorlandZ",
                            "factorCtm",
                            "kritiekeCumulatieveOverbelasting"});
                table29.AddRow(new string[] {
                            "6.6",
                            "1.5",
                            "0.004",
                            "0.1",
                            "3.85",
                            "7000"});
#line 271
  testRunner.Given("the following constant inputs:", ((string)(null)), table29, "Given ");
#line hidden
#line 274
     testRunner.When(string.Format("I change the property bodemVoorlandZ to a value of {0}", diepteVoorland), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 275
     testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 276
     testRunner.Then(string.Format("the output value for {0} is", cumulatieveOverbelastingTijdstap), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("BM Gras benchmark 18")]
        [NUnit.Framework.TestCaseAttribute("0.04", "100", "13755.272", "0.007", null)]
        [NUnit.Framework.TestCaseAttribute("0.1", "10", "5759.070", "0.002", null)]
        [NUnit.Framework.TestCaseAttribute("0.4", "1", "1031.437", "0.001", null)]
        [NUnit.Framework.TestCaseAttribute("10", "1", "21.453", "0.047", null)]
        public virtual void BMGrasBenchmark18(string diepteVoorland, string kritiekeCumulatieveOverbelasting, string cumulatieveOverbelastingTijdstap, string fos, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("diepteVoorland", diepteVoorland);
            argumentsOfScenario.Add("kritiekeCumulatieveOverbelasting", kritiekeCumulatieveOverbelasting);
            argumentsOfScenario.Add("cumulatieveOverbelastingTijdstap", cumulatieveOverbelastingTijdstap);
            argumentsOfScenario.Add("Fos", fos);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("BM Gras benchmark 18", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 285
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "kritiekeFrontsnelheid",
                            "golfhoogtenHm0",
                            "hellingVoorland",
                            "bodemVoorlandZ",
                            "factorCtm"});
                table30.AddRow(new string[] {
                            "6.6",
                            "1.5",
                            "0.004",
                            "0.1",
                            "3.85"});
#line 286
  testRunner.Given("the following constant inputs:", ((string)(null)), table30, "Given ");
#line hidden
#line 289
     testRunner.When(string.Format("I change the property bodemVoorlandZ to a value of {0}", diepteVoorland), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 290
     testRunner.And(string.Format("I change the property kritiekeCumulatieveOverbelasting to a value of {0}", kritiekeCumulatieveOverbelasting), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 291
  testRunner.And("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 292
  testRunner.Then(string.Format("the output value for {0} is", cumulatieveOverbelastingTijdstap), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 293
  testRunner.And("the output value for <FoS> is", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
