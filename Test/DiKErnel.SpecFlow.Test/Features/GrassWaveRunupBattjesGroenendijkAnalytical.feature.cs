// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DiKErnel.SpecFlow.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GrassWaveRunupBattjesGroenendijkAnalytical")]
    public partial class GrassWaveRunupBattjesGroenendijkAnalyticalFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "GrassWaveRunupBattjesGroenendijkAnalytical.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GrassWaveRunupBattjesGroenendijkAnalytical", "As a user I want to perform grass wave run-up calculations based on Battjes-Groen" +
                    "endijk analytical.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
    #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "tijdstippen",
                        "waterstanden",
                        "golfhoogtenHm0",
                        "golfperiodenTm10",
                        "golfrichtingen"});
            table1.AddRow(new string[] {
                        "0",
                        "3",
                        "0.5",
                        "3",
                        "50"});
            table1.AddRow(new string[] {
                        "3600",
                        "3.1",
                        "0.7",
                        "3.5",
                        "45"});
            table1.AddRow(new string[] {
                        "7200",
                        "3.2",
                        "1",
                        "4",
                        "40"});
            table1.AddRow(new string[] {
                        "10800",
                        "3.3",
                        "1.3",
                        "4.3",
                        "35"});
            table1.AddRow(new string[] {
                        "14400",
                        "3.4",
                        "1.5",
                        "4.5",
                        "30"});
            table1.AddRow(new string[] {
                        "18000",
                        "3.5",
                        "1.8",
                        "4.8",
                        "25"});
            table1.AddRow(new string[] {
                        "21600",
                        "3.6",
                        "2.1",
                        "5.2",
                        "20"});
            table1.AddRow(new string[] {
                        "25200",
                        "3.7",
                        "2.5",
                        "5.5",
                        "15"});
            table1.AddRow(new string[] {
                        "28800",
                        "3.7",
                        "2.8",
                        "5.8",
                        "10"});
            table1.AddRow(new string[] {
                        "32400",
                        "3.6",
                        "2.8",
                        "6",
                        "5"});
            table1.AddRow(new string[] {
                        "36000",
                        "3.5",
                        "2.5",
                        "6",
                        "0"});
            table1.AddRow(new string[] {
                        "39600",
                        "3.4",
                        "2.1",
                        "5.8",
                        "0"});
            table1.AddRow(new string[] {
                        "43200",
                        "3.3",
                        "1.8",
                        "5.5",
                        "5"});
            table1.AddRow(new string[] {
                        "46800",
                        "3.2",
                        "1.5",
                        "5.2",
                        "10"});
            table1.AddRow(new string[] {
                        "50400",
                        "3.1",
                        "1.3",
                        "4.8",
                        "15"});
            table1.AddRow(new string[] {
                        "54000",
                        "3",
                        "1",
                        "4.5",
                        "20"});
            table1.AddRow(new string[] {
                        "57600",
                        "",
                        "",
                        "",
                        ""});
#line 5
        testRunner.Given("the following tijdstippen and hydraulischeBelastingen:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "posities",
                        "hoogten",
                        "ruwheidscoefficienten"});
            table2.AddRow(new string[] {
                        "0",
                        "0",
                        "1.0"});
            table2.AddRow(new string[] {
                        "25",
                        "7.5",
                        ""});
#line 24
        testRunner.And("the following dijkprofiel and a dijkorientatie of 0:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "teenBuitenzijde",
                        "kruinBuitenzijde"});
            table3.AddRow(new string[] {
                        "0",
                        "25"});
#line 28
        testRunner.And("the following karakteristiekePunten:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Setting",
                        "Value"});
            table4.AddRow(new string[] {
                        "positie",
                        "15"});
            table4.AddRow(new string[] {
                        "typeToplaag",
                        "grasGeslotenZode"});
            table4.AddRow(new string[] {
                        "beginSchade",
                        "0"});
            table4.AddRow(new string[] {
                        "verhogingBelastingOvergangAlfaM",
                        "1"});
            table4.AddRow(new string[] {
                        "verlagingSterkteOvergangAlfaS",
                        "1"});
            table4.AddRow(new string[] {
                        "faalgetal",
                        "1"});
            table4.AddRow(new string[] {
                        "factorCtm",
                        "0.92"});
            table4.AddRow(new string[] {
                        "frontsnelheid",
                        "1.1"});
            table4.AddRow(new string[] {
                        "bodemVoorlandZ",
                        "-4.0"});
            table4.AddRow(new string[] {
                        "tanAvl",
                        "0.004"});
#line 31
        testRunner.And("the following rekeninstellingen:", ((string)(null)), table4, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 1 - Default with closed sod")]
        public virtual void Testcase1_DefaultWithClosedSod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 1 - Default with closed sod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 45
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
        testRunner.Then("the schadegetal is 5.964275964074616", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 2 - Default with open sod")]
        public virtual void Testcase2_DefaultWithOpenSod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 2 - Default with open sod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table5.AddRow(new string[] {
                            "typeToplaag",
                            "grasOpenZode"});
#line 49
        testRunner.Given("the following rekeninstellingen are adjusted:", ((string)(null)), table5, "Given ");
#line hidden
#line 52
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
        testRunner.Then("the schadegetal is 21.802708300783724", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 3 - Adjusted critical values")]
        public virtual void Testcase3_AdjustedCriticalValues()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 3 - Adjusted critical values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table6.AddRow(new string[] {
                            "kritiekeCumulatieveOverbelasting",
                            "8000"});
                table6.AddRow(new string[] {
                            "kritiekeFrontsnelheid",
                            "6.2"});
#line 56
        testRunner.Given("the following rekeninstellingen are adjusted:", ((string)(null)), table6, "Given ");
#line hidden
#line 60
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
        testRunner.Then("the schadegetal is 7.042858339779344", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 4 - Adjusted frontsnelheid")]
        public virtual void Testcase4_AdjustedFrontsnelheid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 4 - Adjusted frontsnelheid", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 63
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table7.AddRow(new string[] {
                            "frontsnelheid",
                            "1.15"});
#line 64
        testRunner.Given("the following rekeninstellingen are adjusted:", ((string)(null)), table7, "Given ");
#line hidden
#line 67
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
        testRunner.Then("the schadegetal is 8.10764303618132", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 5 - Adjusted overgangen properties")]
        public virtual void Testcase5_AdjustedOvergangenProperties()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 5 - Adjusted overgangen properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 70
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table8.AddRow(new string[] {
                            "verhogingBelastingOvergangAlfaM",
                            "1.8"});
                table8.AddRow(new string[] {
                            "verlagingSterkteOvergangAlfaS",
                            "0.9"});
#line 71
        testRunner.Given("the following rekeninstellingen are adjusted:", ((string)(null)), table8, "Given ");
#line hidden
#line 75
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
        testRunner.Then("the schadegetal is 34.618492810973976", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 6 - Adjusted foreshore properties")]
        public virtual void Testcase6_AdjustedForeshoreProperties()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 6 - Adjusted foreshore properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 78
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table9.AddRow(new string[] {
                            "bodemVoorlandZ",
                            "0"});
                table9.AddRow(new string[] {
                            "tanAvl",
                            "0.05"});
#line 79
        testRunner.Given("the following rekeninstellingen are adjusted:", ((string)(null)), table9, "Given ");
#line hidden
#line 83
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
        testRunner.Then("the schadegetal is 9.562492468848081", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 7 - Adjusted failure conditions")]
        public virtual void Testcase7_AdjustedFailureConditions()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 7 - Adjusted failure conditions", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 86
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table10.AddRow(new string[] {
                            "beginschade",
                            "0.3"});
                table10.AddRow(new string[] {
                            "faalgetal",
                            "1.2"});
#line 87
        testRunner.Given("the following rekeninstellingen are adjusted:", ((string)(null)), table10, "Given ");
#line hidden
#line 91
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 92
        testRunner.Then("the schadegetal is 6.264275964074616", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 8 - Calculations with a berm")]
        public virtual void Testcase8_CalculationsWithABerm()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 8 - Calculations with a berm", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 94
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table11.AddRow(new string[] {
                            "0",
                            "0",
                            "0.85"});
                table11.AddRow(new string[] {
                            "15",
                            "4",
                            "0.5"});
                table11.AddRow(new string[] {
                            "20",
                            "4.1",
                            "0.95"});
                table11.AddRow(new string[] {
                            "25",
                            "7.5",
                            ""});
#line 95
        testRunner.Given("the following series are adjusted:", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table12.AddRow(new string[] {
                            "dijkorientatie",
                            "20"});
                table12.AddRow(new string[] {
                            "positie",
                            "15"});
#line 101
        testRunner.And("the following rekeninstellingen are adjusted:", ((string)(null)), table12, "And ");
#line hidden
#line 105
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
        testRunner.Then("the schadegetal is 0.37123738545694945", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 9 - Calculations with a berm & adjusted foreshore properties")]
        public virtual void Testcase9_CalculationsWithABermAdjustedForeshoreProperties()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 9 - Calculations with a berm & adjusted foreshore properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 108
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table13.AddRow(new string[] {
                            "0",
                            "0",
                            "0.7"});
                table13.AddRow(new string[] {
                            "15",
                            "5",
                            "0.8"});
                table13.AddRow(new string[] {
                            "20",
                            "5.1",
                            "1"});
                table13.AddRow(new string[] {
                            "30",
                            "7.5",
                            ""});
#line 109
        testRunner.Given("the following series are adjusted:", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table14.AddRow(new string[] {
                            "dijkorientatie",
                            "30"});
                table14.AddRow(new string[] {
                            "positie",
                            "18"});
                table14.AddRow(new string[] {
                            "bodemVoorlandZ",
                            "1"});
                table14.AddRow(new string[] {
                            "tanAvl",
                            "0.009"});
                table14.AddRow(new string[] {
                            "teenBuitenzijde",
                            "0"});
                table14.AddRow(new string[] {
                            "kruinBuitenzijde",
                            "30"});
#line 115
        testRunner.And("the following rekeninstellingen are adjusted:", ((string)(null)), table14, "And ");
#line hidden
#line 123
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
        testRunner.Then("the schadegetal is 0.26854724503160177", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 10 - Negative tijdstippen & adjusted hydraulischeBelastingen")]
        public virtual void Testcase10_NegativeTijdstippenAdjustedHydraulischeBelastingen()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 10 - Negative tijdstippen & adjusted hydraulischeBelastingen", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 126
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "tijdstippen",
                            "waterstanden",
                            "golfhoogtenHm0",
                            "golfperiodenTm10",
                            "golfrichtingen"});
                table15.AddRow(new string[] {
                            "-6840",
                            "3.5",
                            "2.4",
                            "4",
                            "20"});
                table15.AddRow(new string[] {
                            "-6120",
                            "3.6",
                            "2.5",
                            "4.2",
                            "20"});
                table15.AddRow(new string[] {
                            "-5040",
                            "3.7",
                            "2.7",
                            "4.4",
                            "20"});
                table15.AddRow(new string[] {
                            "-3600",
                            "3.8",
                            "2.8",
                            "4.5",
                            "20"});
                table15.AddRow(new string[] {
                            "-1800",
                            "3.9",
                            "2.9",
                            "4.8",
                            "20"});
                table15.AddRow(new string[] {
                            "360",
                            "3.95",
                            "3",
                            "5",
                            "20"});
                table15.AddRow(new string[] {
                            "2880",
                            "4",
                            "2.9",
                            "5.2",
                            "20"});
                table15.AddRow(new string[] {
                            "5760",
                            "3.95",
                            "2.9",
                            "5.5",
                            "15"});
                table15.AddRow(new string[] {
                            "9000",
                            "3.8",
                            "2.8",
                            "5.8",
                            "10"});
                table15.AddRow(new string[] {
                            "12600",
                            "3.6",
                            "2.8",
                            "6",
                            "5"});
                table15.AddRow(new string[] {
                            "16560",
                            "3.5",
                            "2.5",
                            "6",
                            "0"});
                table15.AddRow(new string[] {
                            "20880",
                            "3.4",
                            "2.1",
                            "5.8",
                            "0"});
                table15.AddRow(new string[] {
                            "25560",
                            "3.3",
                            "1.8",
                            "5.5",
                            "5"});
                table15.AddRow(new string[] {
                            "30600",
                            "3.2",
                            "1.5",
                            "5.2",
                            "10"});
                table15.AddRow(new string[] {
                            "36000",
                            "3.1",
                            "1.3",
                            "4.8",
                            "15"});
                table15.AddRow(new string[] {
                            "43200",
                            "3",
                            "1",
                            "4.5",
                            "20"});
                table15.AddRow(new string[] {
                            "50400",
                            "",
                            "",
                            "",
                            ""});
#line 127
        testRunner.Given("the following series are adjusted:", ((string)(null)), table15, "Given ");
#line hidden
#line 146
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 147
        testRunner.Then("the schadegetal is 8.587822405580951", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 11 - Negative tijdstippen & adjusted hydraulischeBelastingen, dike profi" +
            "le properties (berm), foreshore properties")]
        public virtual void Testcase11_NegativeTijdstippenAdjustedHydraulischeBelastingenDikeProfilePropertiesBermForeshoreProperties()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 11 - Negative tijdstippen & adjusted hydraulischeBelastingen, dike profi" +
                    "le properties (berm), foreshore properties", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 149
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "tijdstippen",
                            "waterstanden",
                            "golfhoogtenHm0",
                            "golfperiodenTm10",
                            "golfrichtingen"});
                table16.AddRow(new string[] {
                            "-6840",
                            "3.5",
                            "2.4",
                            "4",
                            "20"});
                table16.AddRow(new string[] {
                            "-6120",
                            "3.6",
                            "2.5",
                            "4.2",
                            "20"});
                table16.AddRow(new string[] {
                            "-5040",
                            "3.7",
                            "2.7",
                            "4.4",
                            "20"});
                table16.AddRow(new string[] {
                            "-3600",
                            "3.8",
                            "2.8",
                            "4.5",
                            "20"});
                table16.AddRow(new string[] {
                            "-1800",
                            "3.9",
                            "2.9",
                            "4.8",
                            "20"});
                table16.AddRow(new string[] {
                            "360",
                            "3.95",
                            "3",
                            "5",
                            "20"});
                table16.AddRow(new string[] {
                            "2880",
                            "4",
                            "2.9",
                            "5.2",
                            "20"});
                table16.AddRow(new string[] {
                            "5760",
                            "3.95",
                            "2.9",
                            "5.5",
                            "15"});
                table16.AddRow(new string[] {
                            "9000",
                            "3.8",
                            "2.8",
                            "5.8",
                            "10"});
                table16.AddRow(new string[] {
                            "12600",
                            "3.6",
                            "2.8",
                            "6",
                            "5"});
                table16.AddRow(new string[] {
                            "16560",
                            "3.5",
                            "2.5",
                            "6",
                            "0"});
                table16.AddRow(new string[] {
                            "20880",
                            "3.4",
                            "2.1",
                            "5.8",
                            "0"});
                table16.AddRow(new string[] {
                            "25560",
                            "3.3",
                            "1.8",
                            "5.5",
                            "5"});
                table16.AddRow(new string[] {
                            "30600",
                            "3.2",
                            "1.5",
                            "5.2",
                            "10"});
                table16.AddRow(new string[] {
                            "36000",
                            "3.1",
                            "1.3",
                            "4.8",
                            "15"});
                table16.AddRow(new string[] {
                            "43200",
                            "3",
                            "1",
                            "4.5",
                            "20"});
                table16.AddRow(new string[] {
                            "50400",
                            "",
                            "",
                            "",
                            ""});
#line 150
        testRunner.Given("the following series are adjusted:", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table17.AddRow(new string[] {
                            "0",
                            "0",
                            "0.85"});
                table17.AddRow(new string[] {
                            "15",
                            "4",
                            "0.5"});
                table17.AddRow(new string[] {
                            "20",
                            "4.1",
                            "0.95"});
                table17.AddRow(new string[] {
                            "25",
                            "7.5",
                            ""});
#line 169
        testRunner.And("the following series are adjusted:", ((string)(null)), table17, "And ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table18.AddRow(new string[] {
                            "dijkorientatie",
                            "20"});
                table18.AddRow(new string[] {
                            "positie",
                            "15"});
                table18.AddRow(new string[] {
                            "bodemVoorlandZ",
                            "0.5"});
                table18.AddRow(new string[] {
                            "tanAvl",
                            "0.01"});
#line 175
        testRunner.And("the following rekeninstellingen are adjusted:", ((string)(null)), table18, "And ");
#line hidden
#line 181
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 182
        testRunner.Then("the schadegetal is 0.6219200388310531", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 12 - All properties adjusted")]
        public virtual void Testcase12_AllPropertiesAdjusted()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 12 - All properties adjusted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 184
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "tijdstippen",
                            "waterstanden",
                            "golfhoogtenHm0",
                            "golfperiodenTm10",
                            "golfrichtingen"});
                table19.AddRow(new string[] {
                            "-6840",
                            "3.5",
                            "2.4",
                            "4",
                            "20"});
                table19.AddRow(new string[] {
                            "-6120",
                            "3.6",
                            "2.5",
                            "4.2",
                            "20"});
                table19.AddRow(new string[] {
                            "-5040",
                            "3.7",
                            "2.7",
                            "4.4",
                            "20"});
                table19.AddRow(new string[] {
                            "-3600",
                            "3.8",
                            "2.8",
                            "4.5",
                            "20"});
                table19.AddRow(new string[] {
                            "-1800",
                            "3.9",
                            "2.9",
                            "4.8",
                            "20"});
                table19.AddRow(new string[] {
                            "360",
                            "3.95",
                            "3",
                            "5",
                            "20"});
                table19.AddRow(new string[] {
                            "2880",
                            "4",
                            "2.9",
                            "5.2",
                            "20"});
                table19.AddRow(new string[] {
                            "5760",
                            "3.95",
                            "2.9",
                            "5.5",
                            "15"});
                table19.AddRow(new string[] {
                            "9000",
                            "3.8",
                            "2.8",
                            "5.8",
                            "10"});
                table19.AddRow(new string[] {
                            "12600",
                            "3.6",
                            "2.8",
                            "6",
                            "5"});
                table19.AddRow(new string[] {
                            "16560",
                            "3.5",
                            "2.5",
                            "6",
                            "0"});
                table19.AddRow(new string[] {
                            "20880",
                            "3.4",
                            "2.1",
                            "5.8",
                            "0"});
                table19.AddRow(new string[] {
                            "25560",
                            "3.3",
                            "1.8",
                            "5.5",
                            "5"});
                table19.AddRow(new string[] {
                            "30600",
                            "3.2",
                            "1.5",
                            "5.2",
                            "10"});
                table19.AddRow(new string[] {
                            "36000",
                            "3.1",
                            "1.3",
                            "4.8",
                            "15"});
                table19.AddRow(new string[] {
                            "43200",
                            "3",
                            "1",
                            "4.5",
                            "20"});
                table19.AddRow(new string[] {
                            "50400",
                            "",
                            "",
                            "",
                            ""});
#line 185
        testRunner.Given("the following series are adjusted:", ((string)(null)), table19, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table20.AddRow(new string[] {
                            "0",
                            "0",
                            "0.85"});
                table20.AddRow(new string[] {
                            "15",
                            "4",
                            "0.5"});
                table20.AddRow(new string[] {
                            "20",
                            "4.1",
                            "0.95"});
                table20.AddRow(new string[] {
                            "25",
                            "7.5",
                            ""});
#line 204
        testRunner.And("the following series are adjusted:", ((string)(null)), table20, "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table21.AddRow(new string[] {
                            "dijkorientatie",
                            "20"});
                table21.AddRow(new string[] {
                            "positie",
                            "15"});
                table21.AddRow(new string[] {
                            "beginschade",
                            "0.1"});
                table21.AddRow(new string[] {
                            "verhogingBelastingOvergangAlfaM",
                            "1.7"});
                table21.AddRow(new string[] {
                            "verlagingSterkteOvergangAlfaS",
                            "0.85"});
                table21.AddRow(new string[] {
                            "faalgetal",
                            "1.1"});
                table21.AddRow(new string[] {
                            "factorCtm",
                            "0.89"});
                table21.AddRow(new string[] {
                            "frontsnelheid",
                            "1.2"});
                table21.AddRow(new string[] {
                            "bodemVoorlandZ",
                            "-1"});
                table21.AddRow(new string[] {
                            "tanAvl",
                            "0.008"});
                table21.AddRow(new string[] {
                            "kritiekeCumulatieveOverbelasting",
                            "7500"});
                table21.AddRow(new string[] {
                            "kritiekeFrontsnelheid",
                            "5"});
#line 210
        testRunner.And("the following rekeninstellingen are adjusted:", ((string)(null)), table21, "And ");
#line hidden
#line 224
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 225
        testRunner.Then("the schadegetal is 41.84703315170409", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 13 - Robustness edge cases")]
        public virtual void Testcase13_RobustnessEdgeCases()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 13 - Robustness edge cases", @"    Remark: The timestep 36000 - 43200 results in a 0 for the Z2% (Representatieve2P). This results in a division by zero
    due to the wave run up transition and the wave run up root mean square being both 0. Therefore, no result will be
    produced by the DiKErnel (NaN)", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 227
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "tijdstippen",
                            "waterstanden",
                            "golfhoogtenHm0",
                            "golfperiodenTm10",
                            "golfrichtingen"});
                table22.AddRow(new string[] {
                            "-6840",
                            "3.53232",
                            "2.443434",
                            "4.132323",
                            "200.434343"});
                table22.AddRow(new string[] {
                            "36000",
                            "3.19999",
                            "1.3",
                            "4.83",
                            "15.9999"});
                table22.AddRow(new string[] {
                            "43200",
                            "7.5",
                            "1.1111",
                            "4.51111",
                            "20.43434"});
                table22.AddRow(new string[] {
                            "50400",
                            "",
                            "",
                            "",
                            ""});
#line 231
        testRunner.Given("the following series are adjusted:", ((string)(null)), table22, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table23.AddRow(new string[] {
                            "0",
                            "0",
                            "0.859999"});
                table23.AddRow(new string[] {
                            "15.001",
                            "4.0005",
                            "0.51111"});
                table23.AddRow(new string[] {
                            "20.999",
                            "4.1",
                            "0.95111"});
                table23.AddRow(new string[] {
                            "25",
                            "7.5",
                            ""});
#line 237
        testRunner.And("the following series are adjusted:", ((string)(null)), table23, "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table24.AddRow(new string[] {
                            "dijkorientatie",
                            "179.5"});
                table24.AddRow(new string[] {
                            "positie",
                            "17.04343"});
                table24.AddRow(new string[] {
                            "bodemVoorlandZ",
                            "-0.59999"});
                table24.AddRow(new string[] {
                            "tanAvl",
                            "0.01111"});
                table24.AddRow(new string[] {
                            "beginschade",
                            "0.54545"});
                table24.AddRow(new string[] {
                            "verhogingBelastingOvergangAlfaM",
                            "3.754545"});
                table24.AddRow(new string[] {
                            "verlagingSterkteOvergangAlfaS",
                            "0.111"});
                table24.AddRow(new string[] {
                            "faalgetal",
                            "10.32321"});
                table24.AddRow(new string[] {
                            "factorCtm",
                            "0.1656454"});
                table24.AddRow(new string[] {
                            "frontsnelheid",
                            "2.21243434"});
                table24.AddRow(new string[] {
                            "kritiekeCumulatieveOverbelasting",
                            "6212.32434"});
                table24.AddRow(new string[] {
                            "kritiekeFrontsnelheid",
                            "4.54434343"});
#line 243
        testRunner.And("the following rekeninstellingen are adjusted:", ((string)(null)), table24, "And ");
#line hidden
#line 257
        testRunner.When("I run the grass wave run-up Battjes-Groenendijk analytical calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 258
        testRunner.Then("the schadegetal is NaN", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
