// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DiKErnel.SpecFlow.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GrassWaveRunupBattjesGroenendijkAnalytical")]
    public partial class GrassWaveRunupBattjesGroenendijkAnalyticalFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "GrassWaveRunupBattjesGroenendijkAnalytical.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GrassWaveRunupBattjesGroenendijkAnalytical", "As a user I want to perform grass wave run-up calculations based on Battjes-Groen" +
                    "endijk analytical.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
    #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "tijdstippen",
                        "waterstanden",
                        "golfhoogtenHm0",
                        "golfperiodenTm10",
                        "golfrichtingen"});
            table1.AddRow(new string[] {
                        "0",
                        "3",
                        "0.5",
                        "3",
                        "50"});
            table1.AddRow(new string[] {
                        "3600",
                        "3.1",
                        "0.7",
                        "3.5",
                        "45"});
            table1.AddRow(new string[] {
                        "7200",
                        "3.2",
                        "1",
                        "4",
                        "40"});
            table1.AddRow(new string[] {
                        "10800",
                        "3.3",
                        "1.3",
                        "4.3",
                        "35"});
            table1.AddRow(new string[] {
                        "14400",
                        "3.4",
                        "1.5",
                        "4.5",
                        "30"});
            table1.AddRow(new string[] {
                        "18000",
                        "3.5",
                        "1.8",
                        "4.8",
                        "25"});
            table1.AddRow(new string[] {
                        "21600",
                        "3.6",
                        "2.1",
                        "5.2",
                        "20"});
            table1.AddRow(new string[] {
                        "25200",
                        "3.7",
                        "2.5",
                        "5.5",
                        "15"});
            table1.AddRow(new string[] {
                        "28800",
                        "3.7",
                        "2.8",
                        "5.8",
                        "10"});
            table1.AddRow(new string[] {
                        "32400",
                        "3.6",
                        "2.8",
                        "6",
                        "5"});
            table1.AddRow(new string[] {
                        "36000",
                        "3.5",
                        "2.5",
                        "6",
                        "0"});
            table1.AddRow(new string[] {
                        "39600",
                        "3.4",
                        "2.1",
                        "5.8",
                        "0"});
            table1.AddRow(new string[] {
                        "43200",
                        "3.3",
                        "1.8",
                        "5.5",
                        "5"});
            table1.AddRow(new string[] {
                        "46800",
                        "3.2",
                        "1.5",
                        "5.2",
                        "10"});
            table1.AddRow(new string[] {
                        "50400",
                        "3.1",
                        "1.3",
                        "4.8",
                        "15"});
            table1.AddRow(new string[] {
                        "54000",
                        "3",
                        "1",
                        "4.5",
                        "20"});
            table1.AddRow(new string[] {
                        "57600",
                        "",
                        "",
                        "",
                        ""});
#line 5
        testRunner.Given("the following tijdstippen and hydraulischeBelastingen:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "posities",
                        "hoogten",
                        "ruwheidscoefficienten",
                        "teenBuitenzijde",
                        "kruinBuitenzijde"});
            table2.AddRow(new string[] {
                        "0",
                        "0",
                        "1.0",
                        "0",
                        "25"});
            table2.AddRow(new string[] {
                        "25",
                        "7.5",
                        "",
                        "",
                        ""});
#line 24
        testRunner.And("the following dijkprofiel and dikeorientatie of 0:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "positie",
                        "typeToplaag",
                        "beginschade",
                        "verhogingBelastingOvergangAlfaM",
                        "verlagingSterkteOvergangAlfaS"});
            table3.AddRow(new string[] {
                        "15",
                        "grasGeslotenZode",
                        "0",
                        "1",
                        "1"});
#line 28
        testRunner.And("the following locaties:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "faalgetal",
                        "factorCtm",
                        "frontsnelheid",
                        "bodemVoorlandZ",
                        "tanAvl",
                        "typeToplaag"});
            table4.AddRow(new string[] {
                        "1",
                        "0.92",
                        "1.1",
                        "-4.0",
                        "0.004",
                        "grasGeslotenZode"});
#line 31
        testRunner.And("the following rekenmethoden:", ((string)(null)), table4, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 1 - Default with closed sod")]
        public virtual void Testcase1_DefaultWithClosedSod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 1 - Default with closed sod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
#line 36
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
        testRunner.Then("the schadegetal is 5.964275964074616", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 2 - Default with open sod")]
        public virtual void Testcase2_DefaultWithOpenSod()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 2 - Default with open sod", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "typeToplaag"});
                table5.AddRow(new string[] {
                            "grasOpenZode"});
#line 40
        testRunner.Given("the following values are adjusted:", ((string)(null)), table5, "Given ");
#line hidden
#line 43
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
        testRunner.Then("the schadegetal is 21.802708300783724", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 3")]
        public virtual void Testcase3()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 3", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 46
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "kritiekeCumulatieveOverbelasting",
                            "kritiekeFrontsnelheid"});
                table6.AddRow(new string[] {
                            "8000",
                            "6.2"});
#line 47
        testRunner.Given("the following values are adjusted:", ((string)(null)), table6, "Given ");
#line hidden
#line 50
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
        testRunner.Then("the schadegetal is 7.042858339779344", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 4")]
        public virtual void Testcase4()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 4", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 53
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "frontsnelheid"});
                table7.AddRow(new string[] {
                            "1.15"});
#line 54
        testRunner.Given("the following values are adjusted:", ((string)(null)), table7, "Given ");
#line hidden
#line 57
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
        testRunner.Then("the schadegetal is 8.10764303618132", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 5")]
        public virtual void Testcase5()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 5", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "verhogingBelastingOvergangAlfaM",
                            "verlagingSterkteOvergangAlfaS"});
                table8.AddRow(new string[] {
                            "1.8",
                            "0.9"});
#line 61
        testRunner.Given("the following values are adjusted:", ((string)(null)), table8, "Given ");
#line hidden
#line 64
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
        testRunner.Then("the schadegetal is 34.618492810973976", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 6")]
        public virtual void Testcase6()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 6", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "bodemVoorlandZ",
                            "tanAvl"});
                table9.AddRow(new string[] {
                            "0",
                            "0.05"});
#line 68
        testRunner.Given("the following values are adjusted:", ((string)(null)), table9, "Given ");
#line hidden
#line 71
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
        testRunner.Then("the schadegetal is 9.562492468848081", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 7")]
        public virtual void Testcase7()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 7", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "beginschade",
                            "faalgetal"});
                table10.AddRow(new string[] {
                            "0.3",
                            "1.2"});
#line 75
        testRunner.Given("the following values are adjusted:", ((string)(null)), table10, "Given ");
#line hidden
#line 78
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
        testRunner.Then("the schadegetal is 6.264275964074616", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 8")]
        public virtual void Testcase8()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 8", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table11.AddRow(new string[] {
                            "0",
                            "0",
                            "0.85"});
                table11.AddRow(new string[] {
                            "15",
                            "4",
                            "0.5"});
                table11.AddRow(new string[] {
                            "20",
                            "4.1",
                            "0.95"});
                table11.AddRow(new string[] {
                            "25",
                            "7.5",
                            ""});
#line 82
        testRunner.Given("the following series are adjusted:", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "dijkorientatie",
                            "positie"});
                table12.AddRow(new string[] {
                            "20",
                            "15"});
#line 88
        testRunner.And("the following values are adjusted:", ((string)(null)), table12, "And ");
#line hidden
#line 91
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 92
        testRunner.Then("the schadegetal is 0.37123738545694945", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 9")]
        public virtual void Testcase9()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 9", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 94
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table13.AddRow(new string[] {
                            "0",
                            "0",
                            "0.7"});
                table13.AddRow(new string[] {
                            "15",
                            "5",
                            "0.8"});
                table13.AddRow(new string[] {
                            "20",
                            "5.1",
                            "1"});
                table13.AddRow(new string[] {
                            "30",
                            "7.5",
                            ""});
#line 95
        testRunner.Given("the following series are adjusted:", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "dijkorientatie",
                            "positie",
                            "bodemVoorlandZ",
                            "tanAvl",
                            "teenBuitenzijde",
                            "kruinBuitenzijde"});
                table14.AddRow(new string[] {
                            "30",
                            "18",
                            "1",
                            "0.009",
                            "0",
                            "30"});
#line 101
        testRunner.And("the following values are adjusted:", ((string)(null)), table14, "And ");
#line hidden
#line 104
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
        testRunner.Then("the schadegetal is 0.26854724503160177", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 10")]
        public virtual void Testcase10()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 10", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 107
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "tijdstippen",
                            "waterstanden",
                            "golfhoogtenHm0",
                            "golfperiodenTm10",
                            "golfrichtingen"});
                table15.AddRow(new string[] {
                            "-6840",
                            "3.5",
                            "2.4",
                            "4",
                            "20"});
                table15.AddRow(new string[] {
                            "-6120",
                            "3.6",
                            "2.5",
                            "4.2",
                            "20"});
                table15.AddRow(new string[] {
                            "-5040",
                            "3.7",
                            "2.7",
                            "4.4",
                            "20"});
                table15.AddRow(new string[] {
                            "-3600",
                            "3.8",
                            "2.8",
                            "4.5",
                            "20"});
                table15.AddRow(new string[] {
                            "-1800",
                            "3.9",
                            "2.9",
                            "4.8",
                            "20"});
                table15.AddRow(new string[] {
                            "360",
                            "3.95",
                            "3",
                            "5",
                            "20"});
                table15.AddRow(new string[] {
                            "2880",
                            "4",
                            "2.9",
                            "5.2",
                            "20"});
                table15.AddRow(new string[] {
                            "5760",
                            "3.95",
                            "2.9",
                            "5.5",
                            "15"});
                table15.AddRow(new string[] {
                            "9000",
                            "3.8",
                            "2.8",
                            "5.8",
                            "10"});
                table15.AddRow(new string[] {
                            "12600",
                            "3.6",
                            "2.8",
                            "6",
                            "5"});
                table15.AddRow(new string[] {
                            "16560",
                            "3.5",
                            "2.5",
                            "6",
                            "0"});
                table15.AddRow(new string[] {
                            "20880",
                            "3.4",
                            "2.1",
                            "5.8",
                            "0"});
                table15.AddRow(new string[] {
                            "25560",
                            "3.3",
                            "1.8",
                            "5.5",
                            "5"});
                table15.AddRow(new string[] {
                            "30600",
                            "3.2",
                            "1.5",
                            "5.2",
                            "10"});
                table15.AddRow(new string[] {
                            "36000",
                            "3.1",
                            "1.3",
                            "4.8",
                            "15"});
                table15.AddRow(new string[] {
                            "43200",
                            "3",
                            "1",
                            "4.5",
                            "20"});
                table15.AddRow(new string[] {
                            "50400",
                            "",
                            "",
                            "",
                            ""});
#line 108
        testRunner.Given("the following series are adjusted:", ((string)(null)), table15, "Given ");
#line hidden
#line 127
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
        testRunner.Then("the schadegetal is 8.587822405580951", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 11")]
        public virtual void Testcase11()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 11", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 130
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "tijdstippen",
                            "waterstanden",
                            "golfhoogtenHm0",
                            "golfperiodenTm10",
                            "golfrichtingen"});
                table16.AddRow(new string[] {
                            "-6840",
                            "3.5",
                            "2.4",
                            "4",
                            "20"});
                table16.AddRow(new string[] {
                            "-6120",
                            "3.6",
                            "2.5",
                            "4.2",
                            "20"});
                table16.AddRow(new string[] {
                            "-5040",
                            "3.7",
                            "2.7",
                            "4.4",
                            "20"});
                table16.AddRow(new string[] {
                            "-3600",
                            "3.8",
                            "2.8",
                            "4.5",
                            "20"});
                table16.AddRow(new string[] {
                            "-1800",
                            "3.9",
                            "2.9",
                            "4.8",
                            "20"});
                table16.AddRow(new string[] {
                            "360",
                            "3.95",
                            "3",
                            "5",
                            "20"});
                table16.AddRow(new string[] {
                            "2880",
                            "4",
                            "2.9",
                            "5.2",
                            "20"});
                table16.AddRow(new string[] {
                            "5760",
                            "3.95",
                            "2.9",
                            "5.5",
                            "15"});
                table16.AddRow(new string[] {
                            "9000",
                            "3.8",
                            "2.8",
                            "5.8",
                            "10"});
                table16.AddRow(new string[] {
                            "12600",
                            "3.6",
                            "2.8",
                            "6",
                            "5"});
                table16.AddRow(new string[] {
                            "16560",
                            "3.5",
                            "2.5",
                            "6",
                            "0"});
                table16.AddRow(new string[] {
                            "20880",
                            "3.4",
                            "2.1",
                            "5.8",
                            "0"});
                table16.AddRow(new string[] {
                            "25560",
                            "3.3",
                            "1.8",
                            "5.5",
                            "5"});
                table16.AddRow(new string[] {
                            "30600",
                            "3.2",
                            "1.5",
                            "5.2",
                            "10"});
                table16.AddRow(new string[] {
                            "36000",
                            "3.1",
                            "1.3",
                            "4.8",
                            "15"});
                table16.AddRow(new string[] {
                            "43200",
                            "3",
                            "1",
                            "4.5",
                            "20"});
                table16.AddRow(new string[] {
                            "50400",
                            "",
                            "",
                            "",
                            ""});
#line 131
        testRunner.Given("the following series are adjusted:", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table17.AddRow(new string[] {
                            "0",
                            "0",
                            "0.85"});
                table17.AddRow(new string[] {
                            "15",
                            "4",
                            "0.5"});
                table17.AddRow(new string[] {
                            "20",
                            "4.1",
                            "0.95"});
                table17.AddRow(new string[] {
                            "25",
                            "7.5",
                            ""});
#line 150
        testRunner.And("the following series are adjusted:", ((string)(null)), table17, "And ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "dijkorientatie",
                            "positie",
                            "bodemVoorlandZ",
                            "tanAvl"});
                table18.AddRow(new string[] {
                            "20",
                            "15",
                            "0.5",
                            "0.01"});
#line 156
        testRunner.And("the following values are adjusted:", ((string)(null)), table18, "And ");
#line hidden
#line 159
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 160
        testRunner.Then("the schadegetal is 0.669391470228952", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 12")]
        public virtual void Testcase12()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 12", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 162
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "tijdstippen",
                            "waterstanden",
                            "golfhoogtenHm0",
                            "golfperiodenTm10",
                            "golfrichtingen"});
                table19.AddRow(new string[] {
                            "-6840",
                            "3.5",
                            "2.4",
                            "4",
                            "20"});
                table19.AddRow(new string[] {
                            "-6120",
                            "3.6",
                            "2.5",
                            "4.2",
                            "20"});
                table19.AddRow(new string[] {
                            "-5040",
                            "3.7",
                            "2.7",
                            "4.4",
                            "20"});
                table19.AddRow(new string[] {
                            "-3600",
                            "3.8",
                            "2.8",
                            "4.5",
                            "20"});
                table19.AddRow(new string[] {
                            "-1800",
                            "3.9",
                            "2.9",
                            "4.8",
                            "20"});
                table19.AddRow(new string[] {
                            "360",
                            "3.95",
                            "3",
                            "5",
                            "20"});
                table19.AddRow(new string[] {
                            "2880",
                            "4",
                            "2.9",
                            "5.2",
                            "20"});
                table19.AddRow(new string[] {
                            "5760",
                            "3.95",
                            "2.9",
                            "5.5",
                            "15"});
                table19.AddRow(new string[] {
                            "9000",
                            "3.8",
                            "2.8",
                            "5.8",
                            "10"});
                table19.AddRow(new string[] {
                            "12600",
                            "3.6",
                            "2.8",
                            "6",
                            "5"});
                table19.AddRow(new string[] {
                            "16560",
                            "3.5",
                            "2.5",
                            "6",
                            "0"});
                table19.AddRow(new string[] {
                            "20880",
                            "3.4",
                            "2.1",
                            "5.8",
                            "0"});
                table19.AddRow(new string[] {
                            "25560",
                            "3.3",
                            "1.8",
                            "5.5",
                            "5"});
                table19.AddRow(new string[] {
                            "30600",
                            "3.2",
                            "1.5",
                            "5.2",
                            "10"});
                table19.AddRow(new string[] {
                            "36000",
                            "3.1",
                            "1.3",
                            "4.8",
                            "15"});
                table19.AddRow(new string[] {
                            "43200",
                            "3",
                            "1",
                            "4.5",
                            "20"});
                table19.AddRow(new string[] {
                            "50400",
                            "",
                            "",
                            "",
                            ""});
#line 163
        testRunner.Given("the following series are adjusted:", ((string)(null)), table19, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "posities",
                            "hoogten",
                            "ruwheidscoefficienten"});
                table20.AddRow(new string[] {
                            "0",
                            "0",
                            "0.85"});
                table20.AddRow(new string[] {
                            "15",
                            "4",
                            "0.5"});
                table20.AddRow(new string[] {
                            "20",
                            "4.1",
                            "0.95"});
                table20.AddRow(new string[] {
                            "25",
                            "7.5",
                            ""});
#line 182
        testRunner.And("the following series are adjusted:", ((string)(null)), table20, "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "dijkorientatie",
                            "positie"});
                table21.AddRow(new string[] {
                            "20",
                            "15"});
#line 188
        testRunner.And("the following values are adjusted:", ((string)(null)), table21, "And ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "beginschade",
                            "verhogingBelastingOvergangAlfaM",
                            "verlagingSterkteOvergangAlfaS"});
                table22.AddRow(new string[] {
                            "0.1",
                            "1.7",
                            "0.85"});
#line 191
        testRunner.And("the following values are adjusted:", ((string)(null)), table22, "And ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "faalgetal",
                            "factorCtm",
                            "frontsnelheid",
                            "kritiekeCumulatieveOverbelasting",
                            "kritiekeFrontsnelheid",
                            "bodemVoorlandZ",
                            "tanAvl"});
                table23.AddRow(new string[] {
                            "1.1",
                            "0.89",
                            "1.2",
                            "7500",
                            "5",
                            "-1",
                            "0.008"});
#line 194
        testRunner.And("the following values are adjusted:", ((string)(null)), table23, "And ");
#line hidden
#line 197
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
        testRunner.Then("the schadegetal is 45.67201925900045", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase 13")]
        public virtual void Testcase13()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase 13", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 200
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "waterstanden"});
                table24.AddRow(new string[] {
                            "-3.9"});
                table24.AddRow(new string[] {
                            "8"});
#line 201
        testRunner.Given("the following series are adjusted:", ((string)(null)), table24, "Given ");
#line hidden
#line 205
        testRunner.When("I run the calculation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
